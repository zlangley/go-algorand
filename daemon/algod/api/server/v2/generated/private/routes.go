// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
