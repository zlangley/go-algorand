// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AsOP582W3HhC8Vtze377/wIAAP//FxI3gTaXAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
