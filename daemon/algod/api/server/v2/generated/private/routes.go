// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
