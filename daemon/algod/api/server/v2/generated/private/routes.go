// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9+3PcNtLgv4Kb/ar8uOGM5NfGukp9p7WdrC6O47KUfHefpXMwZM8MIhJgAFCjiU7/",
	"+xUaAAmS4DwkrfdStz/ZGuLR6Bca3Y3GzSgVRSk4cK1GRzejkkpagAaJf9E0FRXXCcvMXxmoVLJSM8FH",
	"R/4bUVoyvhiNR8z8WlK9HI1HnBbQtDH9xyMJv1dMQjY60rKC8UilSyioGVivS9O6Huk6WYjEDXFshzh5",
	"O7rd8IFmmQSl+lD+xPM1YTzNqwyIlpQrmppPiqyYXhK9ZIq4zoRxIjgQMSd62WpM5gzyTE38In+vQK6D",
	"VbrJh5d024CYSJFDH843opgxDh4qqIGqCUK0IBnMsdGSamJmMLD6hloQBVSmSzIXcguoFogQXuBVMTr6",
	"PFLAM5BIrRTYFf53LgH+gERTuQA9uhjHFjfXIBPNisjSThz2Jagq14pgW1zjgl0BJ6bXhPxYKU1mQCgn",
	"n757Q54/f/7aLKSgWkPmmGxwVc3s4Zps99HRKKMa/Oc+r9F8ISTlWVK3//TdG5z/1C1w11ZUKYgLy7H5",
	"Qk7eDi3Ad4ywEOMaFkiHFvebHhGhaH6ewVxI2JEmtvGDEiWc/59KlZTqdFkKxnWELgS/Evs5qsOC7pt0",
	"WA1Aq31pMCXNoJ8PktcXN4fjw4Pbv3w+Tv7T/fny+e2Oy39Tj7sFA9GGaSUl8HSdLCRQlJYl5X18fHL8",
	"oJaiyjOypFdIfFqgqnd9ielrVecVzSvDJyyV4jhfCEWoY6MM5rTKNfETk4rnRk2Z0Ry3E6ZIKcUVyyAb",
	"G+27WrJ0SVKq7BDYjqxYnhserBRkQ7wWX90GYboNUWLguhM+cEH/7yKjWdcWTMA1aoMkzYWCRIst25Pf",
	"cSjPSLihNHuV2m+zImdLIDi5+WA3W8QdNzyd52uika4ZoYpQ4remMWFzshYVWSFxcnaJ/d1qDNYKYpCG",
	"xGnto0Z4h9DXQ0YEeTMhcqAckeflro8yPmeLSoIiqyXopdvzJKhScAVEzH6DVBuy/4/Tnz4QIcmPoBRd",
	"wEeaXhLgqciGaewmje3gvylhCF6oRUnTy/h2nbOCRUD+kV6zoioIr4oZSEMvvz9oQSToSvIhgOyIW/is",
	"oNf9Sc9kxVMkbjNty1AzrMRUmdP1hJzMSUGvvz0YO3AUoXlOSuAZ4wuir/mgkWbm3g5eIkXFsx1sGG0I",
	"FuyaqoSUzRlkpB5lAyRumm3wML4fPI1lFYDjBxkEp55lCzgcriM8Y0TXfCElXUDAMhPys9Nc+FWLS+C1",
	"giOzNX4qJVwxUam60wCMOPVm85oLDUkpYc4iPHbq0GG0h23j1GvhDJxUcE0Zh8xoXgRaaLCaaBCmYMLN",
	"h5n+Fj2jCl69GNrAm687Un8uulTfSPGdqI2NEiuSkX3RfHUCGzebWv13OPyFcyu2SOzPPUKyxZnZSuYs",
	"x23mN0M/j4ZKoRJoIcJvPIotONWVhKNz/tT8RRJyqinPqMzML4X96ccq1+yULcxPuf3pvViw9JQtBpBZ",
	"wxo9TWG3wv5jxourYwNulVO7xpiA1Q2uLKsaiapNBC1ICdJwD64d4TPaQJQgccwhPgin3Sxc+jp6qnkv",
	"xGVVhhhPW8fm2ZqcvB2a3Y65r+Qc12ft8Nhzdu2PQvv20Nc1pw0AOUjckpqGl7CWYKCl6Rz/uZ4jw9O5",
	"/MP8U5Z5jOhGwpwlgF4L58345H4zPyGh7aHFjMJSpNQU9/ejmwCgf5MwHx2N/jJtXDlT+1VN3bhmxtvx",
	"6LgZ5+Fnanra9XVOWs1nwrilDjYd20Prw8NjRo1CgpZ0B4a/5SK9vBMMpTSCppml48yM05cUHJ4sgWYg",
	"SUY1nTSnPmsIDvA7dvw79sNjHMjIHvwT/ofmxHw2Uki1ty+Nbc2UsTJF4AnLjElqNzo7k2mAprIghbVC",
	"ibEe94LyTTO53UFqlf/ZoeWiO1qEOu+s4Uuwh1+EWXpzrD2eCXk3fukwAifNYZ1QM2ptnpuVtymLTasy",
	"cfiJGPy2QWegxj/aV6shhrrDx3DVwsKppv8ALCgz6kNgoT3QQ2NBFCXL4QHkdUnVsr8IY4E9f0ZO/378",
	"8vDZl2cvXxkTopRiIWlBZmsNijx2+wpRep3Dk/7KUMFXuY6P/uqFP+K1x92KIQS4HnsXiToDoxksxoh1",
	"aKA8Ca4lTfWpFhK+v6MCbiMTHSBxCwY/kVRIyxH2uCYCh2PqwEGvwiWsJ1sxYWcb4JC3ci0r/gBrAimF",
	"jFhFKBhapCJPrkCqqOn20bUgroXRsvbY0/ndQktWVDmrDTJS8QzkJMZX5piLBouGQm3bBu3QZ9e8obwb",
	"kEpJ1z2s2vVGVufm3YXj2sj3hytlzNREX3OSwaxahDswmUtREEoy7Ijq/nvQ/8H08iMesB6Ajpew/oIc",
	"o+IMegnrxDJpSZlU+7DqF3sKREN3F5L8AOtfkHe30SKAeYDNP4gMTjXVlXqAnaAZrCGZWXVIKDoTlSaU",
	"cJEZpW4ax/eIAYc7evrQQanDbUcvrQ0yA4PtlFaLpSbmaCFiAtB0TGhq0ZWgvTBA28axZFvZ6awzN5dA",
	"szWZAXAiZs4J4NwTuEiKvkPtw4Juh2rAqg+uLbhKKVJQCrLExUC3gubbWVnQG/CEgCPA9SxECTKn8o7A",
	"aqFpvgVQbBMDtzYpneekD/Vu028iYHfykIxUAvFCY+TUCFwOGoZQuCNOrkCiB+EfSj8/yV3JV5UD8T1n",
	"hZ2xwogv4ZQLBangmYoOllOlk21iaxq1TEWzgkBSYpKKAw94sd5Tpa0fifEMjw1W3eA82AenGAZ4cN81",
	"I//it9z+2KnRk1xVqt5/VVWWQmrIYmvgcL1hrg9wXc8l5sHY9SavBakUbBt5CEvB+A5ZdiUWQVR7J5B3",
	"tPYXhzEjsw+so6hsAdEgYhMgp75VgN0wxjEAiDlj1j2RcZjqcE4dWBmPlBZlaeRPJxWv+w2h6dS2PtY/",
	"N237zEV1o9czAWZ27WFykK8sZm10a0mNfY8jk4Jemr0JrXXrT+rDbIQxUYynkGzifCOWp6ZVKAJbhHTg",
	"oOTi58FsHeHo8G+U6QaZYAsVhhY8YKx8tGGas8ZD+ABGy1vQlOWqNkzqWFAzC4aNuik9xtaWkALX+drw",
	"6pzJwkZecTtT/jdr9mRuFhtjbMSPZ0TCisrMt+ifmIPFJIxncB3XrrTlH8vgmrA40PN6ZqZJ6uOiPBxg",
	"EhV0G2lOc6EYXyQ2hL1tU6sjz48UqThzG9gKpINrDtJtu9qHcBMtfJh3ExybUOEcdHdBgukan9YCZ6ml",
	"YpF+/GAEsWCpFNQG8A1SOwskEgpqoMNQstv2h+fchOw39rvPJ/BxnJB34+N6fh3UMDWLrpZILKNqu0gM",
	"uX5OSgkKhhayyMWM5okx+CHJINdb3a/mIAFvsaXZr0Xa794G+fz8c56dn1+Q96Ytni3wVDZ1roMl5Qto",
	"Yl2hvNhTA1xDWoVbSweNO53NnL+8DX37kDYelULkSe0Y6MbmettNF++XLL2EjBh9hSLmdsFHbQqZSchj",
	"w+Kqjl6ulmtvQpYlcMieTAg55gSKUq+dj61j8XQm54/0pvmvcdaswkQKygkucnLO4+4tm4ZxT5nyw2yW",
	"JJuXeM+p7CCbJ9LXAzE4SVcYRTTDReVzo4f8FHsGW19vRw+YykKxi6fle3RI0BaVWYbHkWZ3U9WsYJix",
	"FzQbG83pkyj6J3ymJ4Scoe4wBywFVyBpjulIygcPmCIFMwd1VaUpQHZ0zpMWJKko3MSPm/9atXReHRw8",
	"B3LwpNtHaWOuurOklYFu32/Jwdh+QnSRb8n56HzUG0lCIa4gs+exkK9tr63D/pd63HP+U08xk4Ku7UnO",
	"yyJR1XzOUmaRnguj1xeiY3VygV9AGvDAbLOKMD3GrQwxita6pUsjgKOo9fQQPp/IqMZON1up0XY+dN7m",
	"HUXgmqZmlRSVzNpaBDWf9Y0gLcokHCAahtgwowsEqZYev6Pc9fW5dUBshu+s44JooSNg18l2272HjCgE",
	"u4j/MSmFoTpzSXI+kypnSveAdO4IjALWDBnZdCbkf4mKpBTlt6w01Gc7IfHAhAdpMwPusX5OZ6k1GIIc",
	"CrAeIvzy9Gl34U+fOpozReaw8pmlpmEXHU+fWiEQSt9bAjqseX0SMaAwOGN208htgCVVy+3hCRx3p/hM",
	"MPTJWz8hCpNSuMWYhUsh5g+wWpZdR20WuI6t1FEO3W2PFCnpetC8Lg2AkZRCkJc5RjzEvMORxOm/JSvN",
	"kE3601pDK3X6fz/+96PPx8l/0uSPg+T1f51e3Ly4ffK09+Oz22+//T/tn57ffvvk3/8tZrwozWbx2N/f",
	"qVoaSJ3muOYn3EbvjeWJDru18wOI+deGu8Nihpge88GSdmG6jzGCMGNKILGR506b/KAH2GmaHDxkKarC",
	"Q7RNDzQYDpKSnEXvrKzOqXrows9ZcHfGcXR9MPCBGzzvUL6OMYYBbNN5qva4hYDOYMF43LWaLiG9RIfp",
	"Vg9yS1uXxnxDDQQ0XZJmmNgWGNqvnb3NWjmFv9+10yHIh4bf1H2juyYrDM42OOwhp6UyG7lzQxcsz5lz",
	"cRlDbEl5ljt/CvxegdI9axp350sYsMlLkIopw42Og2brwB8aUshsZzMzzRwk8DTu6e0FVv8BpsameF9z",
	"kQy5sE28GuEeI3sEZANJ7iY+nVZlma8fQr5xICLBORJUKwai7FcxD69HuO1FrZWGoh9GtF2/DLg4PnkX",
	"ZE8EBM8Zh6QQHNbRG4GMw4/4MXoARNtjoDNagUN9uy7aFvwdsNrz7ETDe+IXVXrAnR/ryxoPQPzuuJ0I",
	"cngxBN0XkJeEkjRnGB8TXGlZpfqcU/TAd87XHbbwcYXhmMwb3yQeBIrEaNxQ55zirlH75aP5F3OI7BDf",
	"AfjQjKoWC1Cd8zaZA5xz14px9KbiXOiuSCzBSpCYBjSxLc0Rc05zDCH9AVKQWaXbuwTmr9sjsw1nm2mI",
	"mJ9zqkkOVGnyI+Nn1zicd515nuGgV0Je1lgYcP0BB8VUEreWvrdf0Whyy186AwoTJuxnb1R8bSvPwx5L",
	"XnaQn7x1592Tt3ioaQLZPdi/WnSzYDyJMpnZ8wrG8ZJOh7fIY3M08wz0pAmJO6qfc33NDSNd0ZxlVN+N",
	"HboqrieLVjo6XNMiRCdY5dd6EfOjLURS0vQSEw1HC6aX1WySimLqN9/pQtQb8TSjUAiO37IpLdnU7P/T",
	"q8MtZ6576CsSUVe345HTOurBU5rdwLEFdeesw8T+by3Io+/fnZGpo5R6ZK8e2KGDFPSIa8bd9G95Cc3i",
	"bTqUvWtyzs/5W5gzzsz3o3OeUU2nM6pYqqaVAvk3mlOewmQhyBFxQ76lmqJzeUfjHh3/DpqymuUsJZcQ",
	"NeOHIi7n558Ng5yfX/SSSvobp5sqHsXCCZIV00tR6cSFHYcd1Kp1/HEBn02zjokb23KkC2u68Qcia2Wp",
	"kiDUEl9+WeZm+QEbKoKdMDGdKC2kV4JGMzpnuaHvB+HSaiRd+fuLlQJFfi1o+ZlxfUES59g9LkuM42Ag",
	"5VenawxPrkvYPRjTgNgMFrOqceHWoIJrLWlS0kUs0e/8/LMGWiL1caMu0FWe5wS7tYJKPi0Xh2oWsDF4",
	"EMCx96UJXNyp7eWjpPEl4CckIbYx2qkJet2VXmaov4vcMNmdyRWMEaVSpZeJke3oqpRhcU+Z+orxwujk",
	"+sjNFtwIgbuNPQN7LIYMI/wYBBu3uvs8KrfDedXBlL1Abe9G4C0/f0Csyow6G4Dydfc2kwKt/R2zT3AJ",
	"6zPRXBLc5/qSOZjbqHVieGZIUJFTg83IMGsotj7y3SG+S2LAyHJZEhu8tddOPFsc1Xzh+wwLst0hH0CI",
	"o/4Jj4YN/F5SGUGEZf4BFNxhoWa8e7F+NFRMpWYpK+vLfTsEnz+2+phBtm0u0e1EzLu7Rk+pR5WYbZzE",
	"HWHn55/BfDH0MDLUTVn0M9nQgc1GIViExzHuLIcgbUI5yaYSjS6/bFtVZAi0OJeA5M2u7sFoYyQ0H5Yu",
	"/4ddNVk/6NfdZaPdmnVhuMg7olg7vsrMvDlc0cFQ9+Dt15Mg2y4oqlDfbfWKrSsM4/qes61v5O/A+ouv",
	"/rbraLzXzdXxyCWAx8ghOFoZGeSwoC6yi6nlPqvIgvZIBQQycPw0n+eMA0liiXtUKZEym+zT6HI3Bxgj",
	"9Ckh1sFDdh4hxsYB2BgSw4HJBxHKJl/sAyQHhjE06sfGYFrwN2wPKTX+QWfebjVD+7qjEaJxcxHckvEi",
	"4nyNqqShE0KrFbFNZtA7UsVY1Kimvl+m7/1RkANux0lLsyaXMW+dsSoA2fDUdwuODeSxjQI8CSKjEhZM",
	"aWjOzUZavSPo6/ouroSGZM6k0gke2aPLM42+U2gMfmeaxtVPC1XEVqphWVz74LSXsE4ylldxart5f3hr",
	"pv1Qn59UNbuENW4yGLKYYWUlswu1pjdtNkxtk1c3Lvi9XfB7+mDr3Y2XTFMzsRRCd+b4k3BVR59sEqYI",
	"A8aYo0+1QZRuUC9Bul1ftwRnMpsUiAmEG0OCPWHaO2VxUPPakaJrCQzdjauwma02eTUoTNS/SDUgA7Qs",
	"WXbdOcPbUQdi82jA72GoW4s/Em8e1YNtwUBwXo/l6kvwPgdL0mDPtCWmevnM2zHTzaIOFEI4FVO+QGIf",
	"UfUlwG24OgOa+2t8uJzR7Xh0vyN/DNduxC24/liTN4pn9GXbI2DLg7cnymlZSnFF88Q5RoZYU4orx5rY",
	"3PtRvrKqix+/z94dv//owMf0bKDSZSVvWhW2K/80qzIn4lhqcpgagdaqPztbQywgfl00InSm+Ezyli1n",
	"tJhjLitejaMsEEXnXJnHQ2pbXSXOp2eXuMG3B2Xt2mtOxNaz1/bm0SvKcn8U9dBuz3y/k1Zopc7f1ysY",
	"5tE/qLrpSXdcOhru2qKTwrk2pAIVtuKcIoJ3sweNCYknXGTVgq4NB1nndF858apIjPglKmdp3G3BZ8ow",
	"B7c+X9OYYOMBY9SMWLGBEAKvWDCWaaZ2iJZ1gAzmiCITXUobcDcTrlRwxdnvFRCWAdfmk3TZxC1BNXLp",
	"L8j0t9P4ZRw3sLuPUw9/HxvDDDVkXSAQmw2M0MMcuQrmD5x+obVr3PwQOAb3CFSFM/a2xA1BJscfjptt",
	"tH/Z9hSHlX37+s8whq0Ct72ssHdbLC2gA3NEywQP7hbHwzsFXrLafY9otgQEN9wMbOI7zZWIDFPxFeW2",
	"6qfpZ3HoeiuwPgPTayUk3kxWEI3SM5XMpfgD4ifZuSFUJMHZoRLNRew9idz47CrR2ivT1HP2+A3hGGTt",
	"IUsu+EjagcQBCUcuD1zneGPDO7got2xtK5S2wtdx4QhTTqZ2/EY4HMy9NJ2crmY0VgvLGFQGpuMmSNNy",
	"xWlBfGdPBVVfVHK8F8R76rbMXuctQTa3EPqlI+5oHP25WD6DlBU0j1tJGWK/nXqasQWzZV4rBUEdUTeQ",
	"rY9tucjVYrVhsAY1J3NyMA4qFTtqZOyKKTbLAVscjpvkX7xOGl4xdYlRGrheKmz+bIfmy4pnEjK9VBax",
	"SpDagLU3B73vewZ6BcDJAbY7fE0eo9dfsSt4YrDobJHR0eFrTEuxfxzENjtXz3mTXslQsfyHUyxxPsaw",
	"hx3DbFJu1En0arktwj+swjZIk+26iyxhS6f1tstSQTldQDyaW2yByfZFaqLTsIMXTAknGSgtxZowHZ8f",
	"NDX6aSA1zag/CwZp8mix8rQoDD81RULtpH44W47a1cXzcPmPGGIp/YXCzoH56zqI7V4eWzUGwj7QAtpo",
	"HRNqKzDgnUhXucMpxAk58XVcsFBgXR/Q4sbMZZaOJp0hIdZDY1zjIarS8+Qbki6ppKlRf5MhcL/MXr0Y",
	"APnVCwN0pzQa328NO54sg/q6oEBexbEoBzjYGwauL3nMBU8KoxyyJ01WZyBg0UxzoWkez0/xyrmbnrR5",
	"6F1tSTNKMsg5VYtzaKB078VDfMOA9+Sqej2DrFVtZq29F7k3k1UyTmlaGbB+/vTe7f2FkLFaW40Q1ncY",
	"tGRwhVkvcXybMe+JVpkPy2oVReh9FrInTrtZqLWJXds9XsJilvbfKpZnvzS5450CrpLydBkNIsxMxy9N",
	"SewaLitd8ds/lHPIo8PZTemL37wi2+tvYtd5CsZ3bNstzGqX21lcA3gbTA+Un9Cgl+ncTBBitZ1MW2df",
	"5QuREZynKQnUcMkkdvenvolEc0QizfOf5qOjz7vfX6I8G92Ob+5xfczfGpu033Pxb7i8/OY2moAqF0PD",
	"y0VlL8ZqQUqKD085e2JecXdznuZ5/O6BaxEfuu5vzlC0uUffmDrhYrYkG5gFBBP2RekiJJBDtQGLGbAK",
	"xv1By6F+/cG9T1JTZR+iNEUXmydEZqhQ3GVx0SNWVOLoUOKO+/jfiEvUeGQOwY+IkOSRQeWjuG9hYDDv",
	"bm6cZtHu7rWtOJs4e6PDja1aCTBQI7SXpm/XjfBebBKz5sJfTzF6zEZ1FYfVl7TV+evawv4hiX8iEP2r",
	"ERZdPeTEod1ElhNuX2t5KO2nRCXTgesl9hsxe3pMAW5JKLADx1WFrwprL3pGKrjgB5uEjo7/uZCuIiwB",
	"ntnLr8RWPDFgtWpW4NGfFVVu6x9AtgDpIlJVmQuajYkZ5+zd8XtiZ1WuehdW2sCKtAtbPae1I3U0VFAL",
	"cp9yQkM567uPszmJ1qxaaSwGpzQtyth1JNPizDfAO09hEAzPxCF2JuStdUcor1rtJE3VKFJP50xn3N/N",
	"f7Sm6RJ1cutUPGy+7F5K2VsYKnjRpX57oi7naAshaeGrKdtiymMijGZfMWVfpYIraN+Aqq8DOsb3N6La",
	"y5MV55ZTojp903XVu6DdA2cznXycLApZB/F7Hg2t8O5bWfrUinzsqnP3NnXvKRdbX6F+qcC/NphSLjhL",
	"saZJ8A5WDbJ74WqXE8MOd7K7Zo8XcSehEeGKFseucykdFgdvZ3tFeDqghMOvhqiWO+yf+PALeqcXoJXT",
	"bJCNfXl351xmXIErz4mPnQV6UshWYB41ZDTXoynQtycb4X2IARfDd+bbB+dLwhzmS8bxfOrQ5tKlrfsX",
	"H+DR5lDLNFkICAzlcE2fTZ8JFurI4Ppi4h/swTFsXNss2yZx9Ic69ikdLoXCtH1j2hKMYTc/t+5e2EmP",
	"y9JNGrXuagrHKg0MIjgSmk98bDRAbj1+ONoGdtuYi4X7qWE0uMJMDihxH+4xxkDRu3dXNK9czQ6snTVc",
	"XyNnPALGe8aheU4qskGk0S0BCYPyOtBPpZJqe5zfSaedAc0HarNjmrSNZ913qA6BESW4Rj/HMBmbQv4D",
	"iqNu0BzCKV/Xr1gZ7g6MiTf4fJ5DZL8sP1pVzojKMMu9U6g/pjiM4vYPeESraARi0LeJbHdjb8K+O9HQ",
	"7cCMKaoUFLM8ktf7tv4YPMWBFwhma/w3Vm9leAUu2+fOJTKx49725eZylbmhfaLY4o5Uafo/IFk6MhDS",
	"KMb974xaCS9U96rHWcVT33fGnEbhH0bCQ0V9U6/Ns6joog645o2bzcee4ddqxqgaBzKbPzWlPKjVvjZg",
	"OZTfnA6m41Pt7tpoSjbVjbVPzMRGsMlR9mkb+45t1C08lBBl86HM517v3eyGnhU24HMKEFo/o9ED6IfO",
	"Wx7mINmISB+zLuG/fwVjl1TghsCR5ztG48FnasajcAF7ArSZH7dNfMd0+52Evk+eiEYJEyW3yEX7XRZ7",
	"L7djwgoJD0zTYO/eE7X9FNBdl4frQFatFPTXuTMBWrgdwP0uiG8UUh+5w3pEz3bRI/HrjaY7KjKLEH8B",
	"t6/Gvpoaaj3J5eaNUf2XIbeFPZoPRDs6OK1Ynm0jbit21RS4weiMD9j9U0rsfLGe8L64uWoj+1gcXSIg",
	"YiJrbU0eTBVEpXYISLlukfATOujTSjK9xkxmb+KyL9EbYt8Dd093uXce63wwl45kS9S54Oeibt08W/u9",
	"sC+1FcbuRhtUYz3Wd9e0KHP/iNq3j2Z/heffvMgOnh/+dfbNwcuDFF68fH1wQF+/oIevnx/Cs29evjiA",
	"w/mr17Nn2bMXz2Yvnr149fJ1+vzF4ezFq9d/feSfZLWANs+d/k+sQ5UcfzxJznyNOUeakv0Aa1t5xrCx",
	"jwi4gAAUlOUY28Gf/ruXsEkqimZ4/+vIBcVHS61LdTSdrlarSdhlusAXAhItqnQ59fP0y99+PKk9wzb9",
	"ESlaP3xrY9uOFY7x26d3p2fk+OPJpGGY0dHoYHIwOcTScSVwWrLR0eg5/oTSs0S6Tx2zjY5ubsej6RJo",
	"rpfujwK0ZKn/pFZ0sQA5ccV9zE9Xz6besTS9cRGd203f2jmX7hJv0CGoAjG9aT0xkYXjYo2E6Y3PRw0+",
	"2SeUpjfotxr8fdp+mjjepgXqjb5m2e3Ul4N1PdxzJdOb5v2gWytBOcTcEr6uedMc65Xj05rK/mqExmdi",
	"MdV+bqrmgJPMUN70elO/pRRcuDv63DN/7EDEjxR52bo10/C71rUabrUPAsgYPT4cHx7c/qUOJh+OXz6/",
	"3dG32TwFSk5rTbpjw4vO88PPDg7+P3tI9cWeK95o87YOp5HqXH+jGfGBL5z78OvNfcLxXq5ResQq9dvx",
	"6OXXXP0JNyxPc4Itg/zZPul/5pdcrLhvaXbgqiioXHsxVi2l4F9IQz1PFwrfUZDsimoYXeBDHbFI44By",
	"wRdr91Yu+Azvv5TL11Iuf473iZ/tKeB//hX/S53+2dTpqVV3u6tTb8q5bBA1nbnQivtgky6mthJx87Mv",
	"ftGvCNE2hYeUtTsnkcfo3eWweuISN+ywkeoidZBcZNah4itVdlKqJj1l/skN2ipk8wOs1TbNfrYE8qsb",
	"PmHZr3iTBkMmYyIk+ZXmefAbVhz0Nv8kvhE0FSeGd4Ge5EZzAgH8vR5MEHavtJgd7hJ8bRKLg1ZYtZ+J",
	"0NQ1ngPUYP9egVw3cNvyr6Fqc7x5eHBwEEtH7cLsnD8WYrxHtRJJDleQ90k9BESnREkPYxumP2vX6A0r",
	"y4SH9gjX4cs9M2iKzcQgw1Hb5VL2ge6t4I80WVHmHosLkgHt07cF02QGc4GP4upKcndVod48YkBxkZgh",
	"Y7A0Vx3vu6v/+V5dud2gBdWy0plY8WHFhRe1ae5uOuHdo9pXoQXxA9SaakJ+ctGqfE1KKa5YBoRikpWo",
	"dONMMp191bHO41J1XcwF4zgBSjnOYq/00eA+iXuHoa8ETx1kH+zLrB29F+MfB2Nc7mNCf19e6lsgG2nV",
	"+DCmC9DTG7+FfWHZ7fTmEtaB/6PT+MuK6aV74D3S0X0Z6L+STMPu090Ef9xOb2qqhM19wb3W31MjvcYk",
	"t49oJ0jsvmtHA82nLlOo86uN5wc/tt/Civw6rS/8Rz92HVaxr85X5Bs1nuLQ84pMV/tcP18Y3sGLV44f",
	"G0fi0XSKMfSlUHqKWa9tJ2P48aJmlxvPxJ5tbi9u/28AAAD//1aTMbgVmwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
