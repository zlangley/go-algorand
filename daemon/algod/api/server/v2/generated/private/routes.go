// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
