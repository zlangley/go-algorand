// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3f8LAAD//14OdXuCkwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
