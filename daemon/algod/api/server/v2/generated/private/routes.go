// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"dPN/AgAA//80B9CDzZgAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
