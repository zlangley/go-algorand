// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
