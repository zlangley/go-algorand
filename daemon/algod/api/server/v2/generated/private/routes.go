// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
