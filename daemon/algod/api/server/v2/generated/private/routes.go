// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1IwAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
