// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
