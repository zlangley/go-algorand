// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
