// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
