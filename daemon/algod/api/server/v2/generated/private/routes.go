// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/L8AAAD//7fv5ajwmAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
