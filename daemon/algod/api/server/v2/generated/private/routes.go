// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1GzJtWcUvzU3n27+bwAAAP//171PFI2PAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
