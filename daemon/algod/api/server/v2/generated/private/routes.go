// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"PzVL8sUzil+am083/y8AAP//IMJfykeZAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
