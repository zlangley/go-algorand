// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAAA//9agYJ1A5EAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
