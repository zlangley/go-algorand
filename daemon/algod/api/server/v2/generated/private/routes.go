// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"M4pfmpvPN/8vAAD//0jWTkOOmAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
