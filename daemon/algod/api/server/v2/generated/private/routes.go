// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
