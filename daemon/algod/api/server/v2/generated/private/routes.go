// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
