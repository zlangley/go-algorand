// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
