// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64, params GetApplicationByIDParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64, params GetAssetByIDParams) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Create a speculation context starting at the given block.
	// (POST /v2/blocks/{round}/speculation)
	CreateSpeculation(ctx echo.Context, round uint64) error
	// Get a Merkle proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetProof(ctx echo.Context, round uint64, txid string, params GetProofParams) error
	// Executes a batch of contract initializations/calls.
	// (POST /v2/contracts/batch)
	ContractBatchExecute(ctx echo.Context, params ContractBatchExecuteParams) error
	// Creates a new contract with the specified identifier and source code
	// (POST /v2/contracts/{id})
	CreateContract(ctx echo.Context, id string, params CreateContractParams) error
	// Calls a function on a previously initialized contract.
	// (POST /v2/contracts/{id}/call/{function})
	CallContract(ctx echo.Context, id string, function string, params CallContractParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Operates on a speculation object.
	// (POST /v2/speculation/{speculation}/{operation})
	SpeculationOperation(ctx echo.Context, speculation string, operation string) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context, params RawTransactionParams) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context, params TransactionParamsParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
		"format":      true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationByIDParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetByIDParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId, params)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// CreateSpeculation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSpeculation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSpeculation(ctx, round)
	return err
}

// GetProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProofParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProof(ctx, round, txid, params)
	return err
}

// ContractBatchExecute converts echo context to params.
func (w *ServerInterfaceWrapper) ContractBatchExecute(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ContractBatchExecuteParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContractBatchExecute(ctx, params)
	return err
}

// CreateContract converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContract(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"sender":      true,
		"address":     true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateContractParams
	// ------------- Optional query parameter "sender" -------------
	if paramValue := ctx.QueryParam("sender"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sender", ctx.QueryParams(), &params.Sender)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sender: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateContract(ctx, id, params)
	return err
}

// CallContract converts echo context to params.
func (w *ServerInterfaceWrapper) CallContract(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
		"sender":      true,
		"address":     true,
		"args":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "function" -------------
	var function string

	err = runtime.BindStyledParameter("simple", false, "function", ctx.Param("function"), &function)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter function: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CallContractParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// ------------- Optional query parameter "sender" -------------
	if paramValue := ctx.QueryParam("sender"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sender", ctx.QueryParams(), &params.Sender)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sender: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "args" -------------
	if paramValue := ctx.QueryParam("args"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "args", ctx.QueryParams(), &params.Args)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter args: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CallContract(ctx, id, function, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// SpeculationOperation converts echo context to params.
func (w *ServerInterfaceWrapper) SpeculationOperation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "speculation" -------------
	var speculation string

	err = runtime.BindStyledParameter("simple", false, "speculation", ctx.Param("speculation"), &speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// ------------- Path parameter "operation" -------------
	var operation string

	err = runtime.BindStyledParameter("simple", false, "operation", ctx.Param("operation"), &operation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter operation: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SpeculationOperation(ctx, speculation, operation)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RawTransactionParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx, params)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TransactionParamsParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx, params)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET("/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.GET("/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET("/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET("/v2/blocks/:round", wrapper.GetBlock, m...)
	router.POST("/v2/blocks/:round/speculation", wrapper.CreateSpeculation, m...)
	router.GET("/v2/blocks/:round/transactions/:txid/proof", wrapper.GetProof, m...)
	router.POST("/v2/contracts/batch", wrapper.ContractBatchExecute, m...)
	router.POST("/v2/contracts/:id", wrapper.CreateContract, m...)
	router.POST("/v2/contracts/:id/call/:function", wrapper.CallContract, m...)
	router.GET("/v2/ledger/supply", wrapper.GetSupply, m...)
	router.POST("/v2/speculation/:speculation/:operation", wrapper.SpeculationOperation, m...)
	router.GET("/v2/status", wrapper.GetStatus, m...)
	router.GET("/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST("/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST("/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.POST("/v2/transactions", wrapper.RawTransaction, m...)
	router.GET("/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET("/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET("/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PbuJLoX8FqtyrJrGg5r9kTV03t9STz8D1JJhV7zp67ce4sRLYkHJMADwBa0uT6",
	"v99CAyBBEpTkR14z+pRYxKPRaHQ3uhvdH0apKErBgWs1OvowKqmkBWiQ+BdNU1FxnbDM/JWBSiUrNRN8",
	"dOS/EaUl4/PReMTMryXVi9F4xGkBTRvTfzyS8M+KSchGR1pWMB6pdAEFNQPrdWla1yOtkrlI3BDHdoiT",
	"F6OrDR9olklQqg/lLzxfE8bTvMqAaEm5oqn5pMiS6QXRC6aI60wYJ4IDETOiF63GZMYgz9SBX+Q/K5Dr",
	"YJVu8uElXTUgJlLk0IfzuSimjIOHCmqg6g0hWpAMZthoQTUxMxhYfUMtiAIq0wWZCbkFVAtECC/wqhgd",
	"vRsp4BlI3K0U2CX+dyYBfodEUzkHPXo/ji1upkEmmhWRpZ047EtQVa4Vwba4xjm7BE5MrwPyqlKaTIFQ",
	"Tt7++Jw8fvz4mVlIQbWGzBHZ4Kqa2cM12e6jo1FGNfjPfVqj+VxIyrOkbv/2x+c4/6lb4K6tqFIQPyzH",
	"5gs5eTG0AN8xQkKMa5jjPrSo3/SIHIrm5ynMhIQd98Q2vtNNCef/rLuSUp0uSsG4juwLwa/Efo7ysKD7",
	"Jh5WA9BqXxpMSTPou8Pk2fsPD8cPD6/+9d1x8t/uz6ePr3Zc/vN63C0YiDZMKymBp+tkLoHiaVlQ3sfH",
	"W0cPaiGqPCMLeombTwtk9a4vMX0t67ykeWXohKVSHOdzoQh1ZJTBjFa5Jn5iUvHcsCkzmqN2whQppbhk",
	"GWRjw32XC5YuSEqVHQLbkSXLc0ODlYJsiNbiq9twmK5ClBi4boQPXNCXi4xmXVswASvkBkmaCwWJFlvE",
	"k5c4lGckFCiNrFLXE1bkbAEEJzcfrLBF3HFD03m+Jhr3NSNUEUq8aBoTNiNrUZElbk7OLrC/W43BWkEM",
	"0nBzWnLUHN4h9PWQEUHeVIgcKEfk+XPXRxmfsXklQZHlAvTCyTwJqhRcARHTf0Cqzbb/79NfXhMhyStQ",
	"is7hDU0vCPBUZMN77CaNSfB/KGE2vFDzkqYXcXGds4JFQH5FV6yoCsKrYgrS7JeXD1oQCbqSfAggO+IW",
	"Oivoqj/pmax4ipvbTNtS1AwpMVXmdH1ATmakoKvvDscOHEVonpMSeMb4nOgVH1TSzNzbwUukqHi2gw6j",
	"zYYFUlOVkLIZg4zUo2yAxE2zDR7GrwdPo1kF4PhBBsGpZ9kCDodVhGbM0TVfSEnnEJDMAfnVcS78qsUF",
	"8JrBkekaP5USLpmoVN1pAEacerN6zYWGpJQwYxEaO3XoMNzDtnHstXAKTiq4poxDZjgvAi00WE40CFMw",
	"4ebLTF9ET6mCb58MCfDm6467PxPdXd+44zvtNjZK7JGMyEXz1R3YuNrU6r/D5S+cW7F5Yn/ubSSbnxlR",
	"MmM5ipl/mP3zaKgUMoEWIrzgUWzOqa4kHJ3zb8xfJCGnmvKMysz8UtifXlW5Zqdsbn7K7U8vxZylp2w+",
	"gMwa1uhtCrsV9h8zXpwdG3CrnNo1xg5Y3eDSkqo5UbWKoAUpQRrqwbUjfIYbiBIkjjlEB+G0mw+XXkVv",
	"NS+FuKjKEONp69o8XZOTF0Oz2zGve3KO67t2eO05W/mr0HV76FVNaQNADm5uSU3DC1hLMNDSdIb/rGZI",
	"8HQmfzf/lGUe23RzwpwmgFYLZ814634zP+FG20uLGYWluFMTlO9HHwKA/k3CbHQ0+tdJY8qZ2K9q4sY1",
	"M16NR8fNOHc/U9PTrq9z02o+E8bt7mDTsb203j08ZtQoJKhJd2D4PhfpxY1gKKU5aJrZfZyacfonBYcn",
	"C6AZSJJRTQ+aW59VBAfoHTv+jP3wGgcyIoN/wf/QnJjP5hRS7fVLo1szZbRMEVjCMqOSWkFnZzINUFUW",
	"pLBaKDHa47WgfN5MbiVIzfLfObS8744W2Z0frOJLsIdfhFl6c609ngp5M3rpEAInzWWdUDNqrZ6blbd3",
	"FptWZeLwE1H4bYPOQI19tM9WQwx1h4/hqoWFU00/AhaUGfUusNAe6K6xIIqS5XAH53VB1aK/CKOBPX5E",
	"Tn8+fvrw0W+Pnn5rVIhSirmkBZmuNShy38kVovQ6hwf9lSGDr3IdH/3bJ/6K1x53K4YQ4HrsXU7UGRjO",
	"YDFGrEHDQPdCrmXF7wCFIKWQEb0BSUeLVOTJJUgVVW7euBbEtTB8yF4MOr9baMmSKqfXQEYqnoE8iGHe",
	"XARRpGso1DZBYYc+W/EGN25AKiVd93bArjeyOjfvLnvSRr6/fiijyCV6xUkG02oeyigyk6IglGTYERni",
	"a5HBqaa6UnfABZrBGmDMRoQg0KmoNKGEi8wcaNM4zh8GjK1o5UHjlA5Zjl5Y+TMFo76ntJovNDFqpYht",
	"bdMxoandlARlhRq4m9ZGBdvKTmcNebkEmq3JFIATMXUXQHc1xUVStBtp7xJy3KkBq760tOAqpUhBKcgS",
	"5//aCppvZ3dZb8ATAo4A17MQJciMyhsCq4Wm+RZAsU0M3FqdcLfmPtS7Tb9pA7uTh9tIpbkEWyowuos5",
	"3TloGELhjji5BIm3x4+6f36Sm25fVQ74dpwEPmOFOb6EUy4UpIJnKjpYTpVOth1b06ilJpgVBCcldlJx",
	"4AELxkuqtLUhMJ6hymjZDc6DfXCKYYAHJYoZ+W9emPTHTg2f5KpStWRRVVkKqSGLrYHDasNcr2FVzyVm",
	"wdi1+NKCVAq2jTyEpWB8hyy7Eosgqr0BwBvZ+otDf4GRA+soKltANIjYBMipbxVgN7RvDwBi7hd1TyQc",
	"pjqUUxvVxyOlRVma86eTitf9htB0alsf61+btn3iorrh65kAM7v2MDnIlxaz1rOxoEa3w5FJQS+MbEJN",
	"zdoS+jCbw5goxlNINlG+OZanplV4BLYc0gEl2flOg9k6h6NDv1GiGySCLbswtOABjf2NNdGfNdahO1Ba",
	"XoCmLFe1YlL7AZpZ0GXQDecwWqSEFLjO14ZWZ0wW1uuG4kz536zak7lZrH+pOX48IxKWVGa+Rf+2FCwm",
	"YTyDVZy70pZtJIMVYXGgZ/XMTJPU+8R4OMBB9KBbL2OaC8X4PLHuy21CrfY63lOk4swJsCVIB9cMpBO7",
	"2rvvEi28i28THJtQ4YwzN0GC6Rqf1gJnd0vFvLz4wRzEgqVSUOu8NUjtLJBIKKiBDt2ITuwPz7kJ2c/t",
	"d+9L9jb8kHbj43p6HeQwNYkuF7hZhtV2kRhSvbnagoKhhcxzMaV5YhR+SDLI9VbTm7lIwAtsaeS1SPvd",
	"2yCfn7/Ls/Pz9+SlaYt3CyAXsJ6gS52kC8rn0Pg5wvNibw2wgrQKRUsHjTtdBJ2ttA19+yo4HpVC5El9",
	"5e36ZXripov3C5ZeQEYMv8Ij5qTgvfYOmUnIfUPiqvZcLRdrr0KWJXDIHhwQcswJFKVeO/tKR+PpTM7v",
	"6U3zr3DWrEInOuUEF3lwzuOmDeuCv+WZ8sNsPkk2Ju2WU9lBNk+kVwP+F0mX6EEyw0XP50br6Cn2DERf",
	"T6IHRGWh2MWG8BMGatHWLrMMryONdFPVtGAYrRU0GxvO6R3o/Rs+0weEnCHvMBcsBZcgaY6hKMobjpki",
	"BTMXdVWlKUB2dM6TFiSpKNzE95v/WrZ0Xh0ePgZy+KDbR2mjrrq7pD0D3b7fkcOx/YToIt+R89H5qDeS",
	"hEJcQmbvYyFd215bh/2Xetxz/kuPMZOCru1Nzp9FoqrZjKXMIj0Xhq/PRUfr5AK/gDTggRGzijA9RlGG",
	"GEVt3e5LcwBHUe3pLmw+kVGNnm5EqeF23m3aph1FYEVTs0qKTGZtNYKazvpKkBZlEg4QNUFvmNE5AVSL",
	"j9/w3PX5uTVAbIbvrGOCaKEjINeD7bp7DxlRCHY5/sekFGbXmQuQ8lE0OVO6B6QzR6AHqCbIiNA5IP9H",
	"VCSleH7LSkN9txMSL0x4kTYzoIz1czpNrcEQ5FCAtRDhl2++6S78m2/cnjNFZrD0UYWmYRcd33xjD4FQ",
	"+tYnoEOaq5OIAoWGeSNNI5HgC6oWB1uN9DjuTrb5YOiTF35CPExKoYgxC5dCzO5gtSxbRXUWWMVW6nYO",
	"zW33FCnpelC9Lg2AkXAykBc52vLFrEORxPG/BSvNkE3oy1pDK2z2/97/z6N3x8l/0+T3w+TZv0/ef3hy",
	"9eCb3o+Prr777v+1f3p89d2D//y3mPKiNJvG/T4/U7UwkDrOseIn3HpujeaJBru1swOI2aeGu0NiZjM9",
	"5oMl7UJ0b2IbwowqgZuNNHfaxIbcgaRp4q+QpKgKL9E2NMxgOAhIcRq907I6PnaqYNO1pzaMheNNYc54",
	"3AKaLiC9QLvmVkNvi6mWRstCRgE0XZBmmJikCtXMngi6gAHFswSpmDIod2iargOjX7g+w7OnRqOegQSe",
	"xsyZXZ88tZZJnH0Xugloohs+cVqVZb6+C0rBgYgEdyVVLWu6sl/FLAyydoxKrZWGou+Qsl1/G7gsv/XG",
	"rN4uCZ4zDkkhOKyj74oYh1f4MXqVQCk20Bn1iaG+XWNfC/4OWO15dtrDW+IXmUMgtd7UId93sPndcTu+",
	"yDC8HC/CkJeEkjRn6GkRXGlZpfqcU7Tldm5qHbLwFuph6/5z3yTuTohY+91Q55wqg8Pawhv1Uc8gwsR+",
	"BPBGflXN56A6NzcyAzjnrhXjaJfDufDim9gNK0FiMMGBbWkuKzOaozPid5CCTCvdZmQYBWsvX9YxaqYh",
	"YnbOqSY5UKXJK8bPVjicN8J4muGgl0Je1FgYMCIBB8VUEpe7P9mvKH7d8hdOFOOTJPvZi6dPrS942GMh",
	"kA7ykxfu5nTyAtXjxiXag/2T+ckKxpMokRnBUjCOof4d2iL3jZLvCehB41x1u37O9YobQrqkOcuovhk5",
	"dFlc7yza09GhmtZGdNwefq3vYxaZuUhKml5guNJozvSimh6kopj4G+NkLurb4ySjUAiO37IJLdnECNnJ",
	"5cMt2vst+BWJsKur8chxHXXngZFu4NiCunPWDkf/txbk3k8/nJGJ2yl1zwYw26GDQNbIJd+9F27Zm8zi",
	"7YNDG7F+zs/5C5gxzsz3o3OeUU0nU6pYqiaVAvk9zSlP4WAuyBFxQ76gmqKZsuN8GXoTjCZkB01ZTXOW",
	"kotQFDdHc8h2f37+zhDI+fn7XnhCX3C6qeL+EJwgWTK9EJVOnANr2NSpWoq0cx1smnVM3NiWIp2DzI0/",
	"4KMpS5UERvv48ssyN8sPyFAR7IThrURpIT0TNJzRmV3N/r4WLkBD0qV/BVUpUOR/Clq+Y1y/J4kzER6X",
	"JXoE0CT/P47XGJpcl7C7Wb8BsRkspofjwq1CBSstaVLSOajo8jXQEncfBXWBRtc8J9it5Z7wwX04VLOA",
	"jWboAI5rh17j4k5tL+9viy8BP+EWYhvDnRr3yU33ywz1s8gNkd14u4IxortU6UViznZ0VcqQuN+Z+qHi",
	"3PDk+lbI5twcAvemcwr25gYZ+orRnTJudfcROU7CedbBlH2GaSOs8a2Qv4VVZUadDkD5uvsmQoHW/qXK",
	"W7iA9Zlonhpd5xGEubta/2diaGbooCKlBsLIEGt4bL0PtbP5zh2OPsqyJNYNaIPXPVkc1XTh+wwfZCsh",
	"7+AQx4iiRsMGei+pjCDCEv8ACm6wUDPerUg/6nSkUrOUlfUToR3cmG9afcwg24RLVJyIWVdq9Jh6lInZ",
	"xkncVnN+/g7MF7Mf5gx1g9/8TNYIbeMaCKbycIQ7zSFwwCt3sqlEpcsv2+YmGAItTiUgeSPVPRhtjITq",
	"w8JFkrDLJn4ELYS7CNqt/ntDRd7aw9qeOmbmzeGSDjpNB9/QnQRxW8HT7PqFnGds3cMwrl9L2iwp/iWd",
	"fz7n38yNxtd6/zYeuVDi2HYIjlpGBjnMqfMRYpCyj0+xoN1TwQYZOH6ZzXLGgSSxEDCqlEiZDRtpeLmb",
	"A4wS+g0h1sBDdh4hRsYB2OhcwYHJaxGeTT6/DpAcGHpjqB8b3TLB37DdOdGkq3Hq7VY1tM87mkM0bp6T",
	"2m3sW6HGoyhLGrohtFoR22QKvStVjEQNa+rbZfrWHwU5oDhOWpw1uYhZ64xWAUiGp75bcG0g99nMCPkH",
	"gY9NwpwpDc292ZxWbwj6tLaLS6EhmTGpdIJX9ujyTKMfFSqDP5qmcfbTQhWx+S5YFuc+OO0FrJOM5VV8",
	"t928f31hpn1d359UNb2ANQoZtKpPMT+LkUKt6U2bDVPbMMiNC35pF/yS3tl6d6Ml09RMLIXQnTm+Eqrq",
	"8JNNhylCgDHi6O/aIEo3sJcgcKvPW4I7mQ0vw1C0g01Wg95hunbw2yDntSNF1xIouhtXYWMkbRhkkN6k",
	"/yRn4AzQsmTZqnOHt6MOeHlRgb+Gom41/ojnclQPtgUDwX09FvUtwdsc7JYGMtMmqulFxm7HTDceN2AI",
	"4VRM+TRrfUQZ0sbAxW24OgOa/xXWfzNtcTmjq/Hodlf+GK7diFtw/abe3iie0ZZtr4AtC941UU7LUopL",
	"mifOMDJEmlJcOtLE5t6O8olZXfz6ffbD8cs3DnwM9AUqXXzrplVhu/KrWZW5EceCXM8Cywhqq/7ubBWx",
	"YPPrp+ehMcXHJLd0OcPFHHHZ49UYyoKj6Iwrs7hLbaupxNn07BI32PagrE17zY3YWvba1jx6SVnur6Ie",
	"2u0x1DfiCq0g7NtaBcOI7DtlN73THT8dDXVt4UnhXBuCSgqbt0oRwbtxaEaFxBsukmpB14aCrHG6z5x4",
	"VSTm+CUqZ2ncbMGnyhAHtzZf05hg4wFl1IxYsQEXAq9YMJZppnbwlnWADOaIIhNNShtwNxUu4WjF2T8r",
	"ICwDrs0n6eJSWwfVnEv/1KIvTuPPOtzA7mVHPfxtdAwz1JB2gUBsVjBCC3PkUZG/cPqF1qZx80NgGLyG",
	"oyqcsScSNziZHH04arbe/kXbUhzmB+3zP0MYNpfU9uSk3myxsIAOzBFNNjooLY6HJQU+19ldRjQiAcEN",
	"hYENoaa5EpFhKr6k3OYONP0sDl1vBdZmYHothcQ3rgqiXnqmkpkUv0P8JjszGxUJlXWoRHURex9E3g52",
	"mWhtlWmywnr8hnAMkvaQJhd8JG1H4sAJRyoPTOcY++8NXJRbsrZ5Dlvu6/jhCENOJnb85nA4mHthOjld",
	"Tmkso45RqAxMx42TpmWK04L4zn4XVP3kxdFe4O+p2zL7MLQE2cSz95MQ3FA5+rpIPoOUFTSPa0kZYr8d",
	"HZmxObPJIisFQTZCN5DNsmupyGV0tG6wBjUnM3I4DvKdut3I2CVTbJoDtng4bsJI8WFi+FjRBUZp4Hqh",
	"sPmjHZovKp5JyPRCWcQqQWoF1r5B87bvKeglACeH2O7hM3Ifrf6KXcIDg0Wni4yOHj7DsBT7x2FM2Lms",
	"sJv4SoaM5b8cY4nTMbo97BhGSLlRD6KPlG0q72EWtuE02a67nCVs6bje9rNUUE7nEPfmFltgsn1xN9Fo",
	"2MELBheTDJSWYk2Yjs8Pmhr+NBCaZtifBcM9aSpsMC5RojD01KQatJP64WxSW5ddy8PlP6KLpfRP0zoX",
	"5k9rILayPLZqdIS9pgW00Tom1L7lx9d1LgeEY4gH5MRnBMF0Y3WWMYsbM5dZOqp0ZgsxqxLjGi9RlZ4l",
	"fyHpgkqaGvZ3MATub9NvnwyA/O0TA3QnwRK/3hp2vFkGWTpBgbyMY1EOULBXDFxfcp8LnhSGOWQPmqjO",
	"4IBF0xwJTfN4fIpnzt3wpM1D76pLmlGSQcqpWpRDA6Z7KxriGwa8JVXV6xkkrWozaV17kdcmskrGd5pW",
	"Bqxf3750sr8QMpa1qTmE9UMBLRlcYtRLHN9mzFuiVebDZ7WKIvQ2C7kmTrtRqLWKXes9/oTFNO3vK5Zn",
	"f2tixztPVCTl6SLqRJiajr81iXVruOzpij9QoZxDHh3OCqXfvPCKiNd/iF3nKRjfsW33KYldbmdxDeBt",
	"MD1QfkKDXqZzM0GI1XYwbR19lc9FRnCeJrlMQyX9N9mYLpBrQ6fRl6fH+Vw8z6lkGnOBYMOD3YNJz+xT",
	"AOwWprefIpm6x6zCvxioR+/fLwd8EYE9xsehbRrG1W+JX0yc7OnEtbVeYMNgTj0lKpkORJPbb8Qc4R2g",
	"jPoo7OjvN+zec5rnO+8gSWmef4ZtpHI+MDqV88q+idWClBTrDbkRZxV3j+Yd0P3HIq5FfOi6v7n00uYJ",
	"faOb3jHp2Xf1dfppnDNcyCclza75xOxAgDFcX4yufA7Gf1agdCyrBH6w4cxoQjbXcZt/kQDP7Es/YrMw",
	"GGBb7+jxEsmKKrdvsiGbg3S+jarMBc3GxIxz9sPxS2JnVS6jEL7+x/yPc5vRo8XbOuQc5Ke7ToqToejn",
	"3cfZHI5pVq00JqhSmhZl7GGLaXHmG+DrmdCdgrerEDsH5IW92Cp/Du0kTSYbUk/nlDCUFOY/WtN0gQe4",
	"db8aFoS7Jy71skoFFQbqXOh1ijmbnEULn7vUpi4dE2Gu9UumbJUUuIT2W5r6YZk7Dv5tTXt5suLcUkr0",
	"2G16+HgTtHvgbMyM97hEIesg/pqXDCsSrpvH9dQKktgz225S2F5pAfvmu86c7atfpZQLzlLMsxDUZalB",
	"dhVXdtE9d0hJ0WVn/oi7Exo5XNFUtHVUnsPiYHJazwhPB+R7+NVsqqUO+ycWIkA75xy0cpwNsrFPN+zM",
	"lIwrcCkDsfhOwCeFbLl4kUNGowaapGHXJCOMrB+4rP5ovr12VgmMhr1gHG86Dm0u8NYaErEghDbXI6bJ",
	"XEAgwcM1vTN9DjB5QAar9we+gASOYT2kZtk2HKA/1LEPDnDOeNP2uWlL0Bva/NyK4reTHpelm3SzBhdL",
	"mDyI4IiTN/FetgC59fjhaBvIbWNUD8pTQ2hwiTEBUKIc7hHGQCKuHy5pXrk8ApjPx0bTRV9fMh4B4yXj",
	"0JQ3iQiINCoScGPwvA70U6mk2l4Md+JpZ0BzDASIMTSlnWfktkN1NhhRgmv0cwxvY5M2e4Bx1A2a6xzl",
	"67qqiqHuQJl4juWcHCL7SbBRq3JKVIbx0p202DHGYRi3TyjfFgD9Y9DXiWx3o/XCdSXR0DuzjCmqFBTT",
	"PBIh+qL+GKSGx1D06Rr/jSWXGF6Bixu5cdo+7Hht/XJzCr3c7H2i2PyGu9L0v8Nt6ZyBcI9i1P+DYSvh",
	"09zerdQynvrlLEbHCV+oAy8V9ZuvNs0io4uacpqaC5uvQMPVE8bIGgdiZN82SSGo5b7W9TUUKZsOBnZT",
	"7V5taEo25bK0JQ9iI9gwG1tqwdZVjBoYh0JrbGSN+dzrvZve0NPCcOyNCPUxW32A/uoDQklJmfPrNkek",
	"j1kXOt4P5t8lqLTZ4O4iXEA2DhJbyQ3jp3c6e30sRQ52GPm2hTwvWii1Dy07mqSQcMeoDUToNVHbj+nb",
	"dXm4DqSYSkF/nTtvQAu3A7jfBfENX4gkZho8znq6y3GOv1cz3ZGfWIT4F5V9bvLJuEGrUoubN7brfxuy",
	"Htgb8oD5uoPTiuXZts1tOSOajCVobvcemM+SM+U3a1vsHzeXPuI6gr+7CYiYyFpbkwdTBW6GHTwMrlvE",
	"n4CmzLSSTK8xNNVrmuy36JOfn4C7ejWu/Fcd4OPiS2xiL+fNmtetm2qGPwlbwKcw6i+qghpTNf6wokWZ",
	"gzsX392b/gc8/suT7PDxw/+Y/uXw6WEKT54+Ozykz57Qh88eP4RHf3n65BAezr59Nn2UPXryaPrk0ZNv",
	"nz5LHz95OH3y7bP/uOcr9VlAmyp4f8fEQsnxm5PkDLOFNVtTsr/C2qYSMWTsk5Q4ZwsUlOWjI//T//In",
	"7CAVRVD93P06cl7O0ULrUh1NJsvl8iDsMplj8vBEiypdTPw8/cyYb05qA62NZ8MdreshWmelI4Vj/Pb2",
	"h9Mzcvzm5KAhmNHR6PDg8OAh5gIrgdOSjY5Gj/EnPD0L3PeJI7bR0Yer8WiyAJrrhfujAC1Z6j+pJZ3P",
	"QR64bC3mp8tHE2/fmXxwtu8rM+o8FrTrE/7W9sV+EpOxNVigQd4n+A3eySr3fHZMpjY8lbgc0zxDC6AN",
	"PTSsrUbWSda8zDwJkr65CFv75OjoXSylayzFSqRSaPMqarhIaFBH3ddOf/qXq5gv4Assn/n1VIZ+36lK",
	"+ejw8CNUohy3RvHg3LCk5ZM7BLF9qbs1oN3heozqFc3NdkFdRn2EC3r41S7ohOPrTcNJiZUUV+PR0694",
	"h064YTs0J9gyCNrsc+df+QUXS+5bGi2hKgoq16gDBGljQm3valAKtMOl3fv7YdEAQWrmIGVHy9Y+XXs6",
	"GxNVV+IpJRNGlxkblphBKoGi5iEkuqiaJM8uMQHYDKuvjv+OBu1Xx3+32dOjBdmD6W0lgbZc+Ql0JAn5",
	"9+umZu9XImS+lBr2fx5Rs09l/9Wmst+Bae93d1+o4KstVPB1q6Sr+qkLJVzwhGMKo0sggaVtr6N+0Trq",
	"08PHX+1qTkFeshTIGRSlkFSyfE1+5XWQ0u1U8JrnVDwIG9vIf3pluRotOlDfg3SKkw+tqn/ZdntOK/9K",
	"1irO1E7NEqR/qzPNubD1cZNUgvLMBpd497Ea++QKaEC0WUzsfox7qRcOYkp64P35fn3yYhe9vLWm4M13",
	"TDdv4Wujir5d4/389p6PakQJ4y4jojZOLh9bKPXg+J5mxAfWfmRxsRt/f3L45NNBEO7Ca6HJjxiK95Gl",
	"zEc1XcTJKuB/mEV18sG/WN+B57lsEG1u54p/buRz5jSO3bs2V6+iLpRoWJzlzTYhR5+RmRl2ZWH9hBUx",
	"5tU80t+zrS2JbSNHpbvje1a1Z1W3YlVdgmqYFFbgUJMPGBkdcqgel8CaX9s4xJdrWhtvyCjcerczA50u",
	"bGWSbhBChNP5iPJhNrcp3cGt+UsnLAK3qEcetlqbc7TjM/wda7Rix5+t3/tqPEpBRojvFx++Zz6zGabs",
	"rV8L+Kwe+IiW+Se19WtalwmAKWIIVAvigvSI2cVrQfm8mbwfFIFouZnNbY/g2yC4x9R+cC+a7fFyi/ja",
	"zUOBtCQJeY0aGh5wHyz/RzQOfUyJ/LEX9FpwILBiCjONW1rcO2VrdaGucFrXsQqrEQ2oDpNQpTaMU6iI",
	"HvEcMz+dtrTvjQrFkJTGypVhrccvUz7vK37+qSp+fq5L2mcRO1/gze1zMPaPxYktq3SRjTV5OwuI0lTi",
	"Gl38iWXQvlJxnEG3Ymc+6BXLriZ1keqhW98bV0t5RybdWGY6XgJalkClujGX3s1YpNuVw4PaBaIOIia0",
	"KVUdAcXg5ZoBMf++SzTMHzfoZF9PfV9P/Wb11D+puGziSi2r8tqM7HCNzyo29ecSmwlKTaNguat5Cy2f",
	"T4big9FWETGf/oMLW5pbWEEY8gF1sJPUhUGPeIup4GOJYTJ2wjalOl1U5eQD/gf136vmQYPPEaQmU//U",
	"3V+QOgYS1PcxY0pd5KdOMIS5g2nOfndO9ZTmecSl43NDfW8GcAPuIsK/AFcLarPfi2zdITUDy6TMKcNH",
	"Ildd+Xy1v6btr2lf/jXty7iRfY2XoZuxxVVitOY58MRxlmQqsrXP1G858VWPQ39wrvo4g7bXMuXqk9cw",
	"YCaDdnq5TtGIIB1ghGXjqHVKxh6zjlxUdvOuhxeSKHe2+edu0LN5PHCNV15fk5gJBmlUcMapjKTMiTiR",
	"g/yLwdaP9qJrL7r2outPJLruQmBslWUuy1hcmKFAnHzwyT83CTcjOQltcqcKjuYyuGSiUuhhdqK2kz61",
	"I81onn8KWdYeJEhueq2hvsCn0Z9FUke72ryxHy9Abi++9uJrL76+ZPF1M5HgJZFN8jyxMcmbHE2ntsXd",
	"shMbCS2bVE1hShsXJy1mQZn8Okn4Wmko+pW3bNffNqUPjrIOgYXzk0LwWDYcW1b/FX6M9baP6gY64/PG",
	"ob7dcg4t+DtgtefZ6aDfEr8HX8axvFWgTGe1Eso6iQC+tkT6b86Dr1feL+LdTnbjmqtFpTOxDFLjBLx8",
	"8iH442ryoT5TGzS8MF2O59HI2ce1VkOJSkUJRqHhNucBSXNh0x/4GXoqX8DzfwkabVf92lrRbXXAEMDd",
	"x9orMXslZq/E/IGVGMuSQFnlJaSkOgTZs1dMBbZRUbEt7pRlvBYZ2HHb2ff6lZ4ovv13Gcv6+kntexwo",
	"5uKEVdPOJqpnikwBH5TRar7QtgxftMZn3TGhqT1diQ0z2sZMbCs73YJeAqG5BJqtyRTAbINZdCM2cZFU",
	"1XVVUdJaD2ucqzVwlVKkoBRkSVgIZBNodR44DDHVG/CEgCPA9SxECTKj8obAWo1rM6DdanU1uHW4v1Oq",
	"+lDvNv2mDexOHm4jlYYFWyrAijeiKHPQMITCHXGCITDsI++fn+Sm21eVWGsiZkLDr2eswMS0nHKhIBU8",
	"i4vjnCqdbDu2plG4FgVWOPqTEk3hbwYeuKe8pEq7Uic8wycdyhWPUb6EiZliGODBCjBm5L/VGVx7Y6eG",
	"X3JVqaYKjI3giEnw8YjDasNcr2FVz2XdgW7sOkTE1tzdNvIQloLx67owuq932Uovq9jilizP8Z1w/FrX",
	"AqJBxCZATn2rALthOOEAIEw1iLaEg1VoQ8oJ6uEqLcrSnD+dVLzuN4SmU9v6WP/atO0Tl4tTRb6eCVBh",
	"+I6DfGkxa0s+LagiDg5S0AsX+TN3dsw+zOYwJorxFJJNlG+O5alpFR6BLYe0e4cOj3/rnHUOR4d+o0Q3",
	"SARbdmFowTHN9qvUGrf6V+/uvUvbahGoV12tcLKkTCczIa3ETLCWd+TpbHv2/6JMuwryLrZOCxcO7aqB",
	"W4bixgkKnqkw15MFwcd7m93v+13MVD8KudNL3eYGqQUxCyMV18wnyDXnrdYxv/RnNXvtea8977Xnvfa8",
	"15732vNee95rz3evPX+uV52J59M++2Qs9yTZ24U/cnrHT5mPsVH6a5UfLwlGRTfneOOTfA00n7gyo9t8",
	"gGHJUqxRzjjB0FcsYOrzcKP/6tsn/gFiXXzPVi0yvMY0ePyInP58/PTho98ePf3WcB8M0G63ve/ylxOl",
	"1zk8cKlL6pIkPocJcIpV/jCFCfW3n9S9nrTK/IzlQJTB1Q/Y+gVcQm40efuEipi7SP92dAY0f+5w84mC",
	"gHs4tsXTfSHYOw8Gbt9n4s8P+/u1bauiBZQH6ltuIpetTjoEuB57Fy+d2VOPTuJqbn7ed/gIkSOzhjt9",
	"Me/wO3U1/cHBtkapcMfvq41WcoiPHjw8tmNDk1mVAmFaEUdx1wquRSZra6vu8I4PIXHH4L56YLisDykN",
	"LT3R2vbOaoEFJuoIgc/CN22V0I1s8+bEYQevndy3TZXTHa7PNIKnnPeFJHMpqvIBbgfla7wQFyXla28E",
	"M5pi4R3GNr3X3TLqumBzj83uXnM/vK1gRvvu7xYtZEmVL7if2Yr78aqD3brw2zHeVD3eVqXOrjdaoX2g",
	"Hnt/E/0uu/QJteGvBJnoFY/USe5URd7n1PxTSIQ3Ulwyc22OMtj+2+6GIWx/QSgDloWSoVOHIp4D6y1d",
	"hlUtvu6H2SEBrBKnGd9abV4Aaoy1GhkpK2IEuhQ0S6nCxIYc9FLIi4+sUuvVScQugmBifGQ/w4nRMA62",
	"ar447k4KbzvDjZsQ67coW5rz86q/TZaNY5dHsoWNvanij2Kq+N4fPkUokXTZPZzWKolncgdGSpd6xaN8",
	"dILccTgiLzgQb2zLr4Oh3pn3s4eAthO0wYVz4kBeEkrSnKGLR3ClZZXqc27fJwao78ci16bxYXX0uW8S",
	"92NE3AxuqHNuFNMZqU3LUbV0BhGn0Y8AXutV1XwOSndkxQzgnLtWjJOKm6ufmJGCpVIk9mGCUXmMzDmw",
	"LQu6JjOaoxfkd5CCTM1FLAyIRpOs0izPnUfWTEPE7JxTTXIwYukVM0qxGc5b7eooA3syaizEU165KrpJ",
	"3JDzk/2K6aTc8r3lDQ2E9rPPUzP+PLWuE5YNQn7ywhUsO3mBNWgaX2wP9k/moCsYT6JEZtiGi2no0ha5",
	"b/RkT0APGq+u2/Vzbi4kWhAURVTfjBy6jpTeWbSno0M1rY3o+Fv8Wt/H0kDPRWKu3XRufp8zvaimWG3a",
	"p4eezEWdKnqSUSgEx2/ZhJYMX6lMLh9u0WBuwa9IhF3tdYs/jhskpANzWuqNx6SX3b0f0BzuoD7sl10U",
	"dquusy/Bui/Bui/SuS/But/dfQnWfYHSfYHSP2uB0oONGqLLhr61Pl8rB2yGwbNEQmpnrhl42KxVya/v",
	"2WX6gJCzheH/1MgAuARJc5JSZRUjbmMNCzZfaKKqNAXIjs550oIkFYWb+H7zX3vNPa8ODx8DOXzQ7WPt",
	"FgHn7fdFVRU/obuOfEfOR+ej3kgSCnEJrjwHNs8qdLfbXluH/Zd63F9kb+sKurbGlQUtSzBiTVWzGUuZ",
	"RXkuzGVgLjoRklzgF5AGOJsCnDBtq7oiPjGy1MU3UZcHOKZ09+X7SfASfFuxxA657NPNfwwF+wVoynJV",
	"v++I3KfwZtOlrCVVzdGtuYpPNA3K/+ac/m6WnF1AGMWMARxLKjPfoq+8ter48gxWcdNSu5poBiuvEnSB",
	"ntUzM23rf5oLZ6u2cNyYaGtyukweCS1ENRQwH+hpBjLT755Cq6k9aKivIlwzkO71AlqzcqEg0aIpBT0M",
	"xyZUuGqFN0GCGiwfYIGzuxXRUN/aD4YlolWYolEYkdpZoGEq1EAn8SGXfT0xPOcmZD93aVXs99oq2LHB",
	"R8b19DoYqF2T6BKFC3K9LhJDqp8Rl8JnwBCNtbATGwyTQa63agynpukLbHk1HmF57W73Nsjn5+/y7Pz8",
	"PXlpS3GbtuQC1pNLmldA0gXlc1A1jsLzYh9f2QipIEK/g8adIlmO7Xa2oe/eeIz0SuqYnV6li27Ufhfv",
	"Fyy9gIwYfoVHzD0miFwmyP26iC/mk1ku1v4ljhWHDw4IOeYEilKvieWwHZt3Z3J+T2+afxUK8LZkjESA",
	"psAuQd7yTPlhNp8km/zwllPZQTZPpFcDyWkkXUau1ruWUIzcpDv32oCoLBR3YaDYS8e9dNxLx7103EvH",
	"vXT8w0vHnlFqb7b5FGabz264+QOVj95Xiv7CFhSG274WmvyIGsXtrNlOYqVRbdzZqW1Ij3LFrhSklWR6",
	"jVZGWrLfLsD8//3Ve/NNXnoDZCXz0dFooXV5NJmgVrEQSk9GV+Pwm+p8NKyUzu0IzsBXSnaJhd7fX/3/",
	"AAAA//8egn54DB8BAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
