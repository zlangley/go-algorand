// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64, params GetApplicationByIDParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64, params GetAssetByIDParams) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Create a speculation context starting at the given block.
	// (POST /v2/blocks/{round}/speculation)
	CreateSpeculation(ctx echo.Context, round uint64) error
	// Get a Merkle proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetProof(ctx echo.Context, round uint64, txid string, params GetProofParams) error
	// Creates a new contract with the specified identifier and source code
	// (POST /v2/contracts/{id})
	CreateContract(ctx echo.Context, id string, params CreateContractParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Operates on a speculation object.
	// (POST /v2/speculation/{speculation}/{operation})
	SpeculationOperation(ctx echo.Context, speculation string, operation string) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context, params RawTransactionParams) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context, params TransactionParamsParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
		"format":      true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationByIDParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetByIDParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId, params)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// CreateSpeculation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSpeculation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSpeculation(ctx, round)
	return err
}

// GetProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProofParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProof(ctx, round, txid, params)
	return err
}

// CreateContract converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContract(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateContractParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateContract(ctx, id, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// SpeculationOperation converts echo context to params.
func (w *ServerInterfaceWrapper) SpeculationOperation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "speculation" -------------
	var speculation string

	err = runtime.BindStyledParameter("simple", false, "speculation", ctx.Param("speculation"), &speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// ------------- Path parameter "operation" -------------
	var operation string

	err = runtime.BindStyledParameter("simple", false, "operation", ctx.Param("operation"), &operation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter operation: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SpeculationOperation(ctx, speculation, operation)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RawTransactionParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx, params)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TransactionParamsParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx, params)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET("/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.GET("/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET("/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET("/v2/blocks/:round", wrapper.GetBlock, m...)
	router.POST("/v2/blocks/:round/speculation", wrapper.CreateSpeculation, m...)
	router.GET("/v2/blocks/:round/transactions/:txid/proof", wrapper.GetProof, m...)
	router.POST("/v2/contracts/:id", wrapper.CreateContract, m...)
	router.GET("/v2/ledger/supply", wrapper.GetSupply, m...)
	router.POST("/v2/speculation/:speculation/:operation", wrapper.SpeculationOperation, m...)
	router.GET("/v2/status", wrapper.GetStatus, m...)
	router.GET("/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST("/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST("/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.POST("/v2/transactions", wrapper.RawTransaction, m...)
	router.GET("/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET("/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET("/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/n8AAAD//+9L176ICgEA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
