// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64, params GetApplicationByIDParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64, params GetAssetByIDParams) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Create a speculation context starting at the given block.
	// (POST /v2/blocks/{round}/speculation)
	CreateSpeculation(ctx echo.Context, round uint64) error
	// Get a Merkle proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetProof(ctx echo.Context, round uint64, txid string, params GetProofParams) error
	// Executes a batch of contract initializations/calls.
	// (POST /v2/contracts/batch)
	ContractBatchExecute(ctx echo.Context, params ContractBatchExecuteParams) error
	// Creates a new contract with the specified identifier and source code
	// (POST /v2/contracts/{id})
	CreateContract(ctx echo.Context, id string, params CreateContractParams) error
	// Calls a function on a previously initialized contract.
	// (POST /v2/contracts/{id}/call/{function})
	CallContract(ctx echo.Context, id string, function string, params CallContractParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Operates on a speculation object.
	// (POST /v2/speculation/{speculation}/{operation})
	SpeculationOperation(ctx echo.Context, speculation string, operation string) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context, params RawTransactionParams) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context, params TransactionParamsParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
		"format":      true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationByIDParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetByIDParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId, params)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// CreateSpeculation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSpeculation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSpeculation(ctx, round)
	return err
}

// GetProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProofParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProof(ctx, round, txid, params)
	return err
}

// ContractBatchExecute converts echo context to params.
func (w *ServerInterfaceWrapper) ContractBatchExecute(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ContractBatchExecuteParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContractBatchExecute(ctx, params)
	return err
}

// CreateContract converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContract(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"sender":      true,
		"address":     true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateContractParams
	// ------------- Optional query parameter "sender" -------------
	if paramValue := ctx.QueryParam("sender"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sender", ctx.QueryParams(), &params.Sender)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sender: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateContract(ctx, id, params)
	return err
}

// CallContract converts echo context to params.
func (w *ServerInterfaceWrapper) CallContract(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
		"sender":      true,
		"address":     true,
		"args":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "function" -------------
	var function string

	err = runtime.BindStyledParameter("simple", false, "function", ctx.Param("function"), &function)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter function: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CallContractParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// ------------- Optional query parameter "sender" -------------
	if paramValue := ctx.QueryParam("sender"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sender", ctx.QueryParams(), &params.Sender)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sender: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "args" -------------
	if paramValue := ctx.QueryParam("args"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "args", ctx.QueryParams(), &params.Args)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter args: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CallContract(ctx, id, function, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// SpeculationOperation converts echo context to params.
func (w *ServerInterfaceWrapper) SpeculationOperation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "speculation" -------------
	var speculation string

	err = runtime.BindStyledParameter("simple", false, "speculation", ctx.Param("speculation"), &speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// ------------- Path parameter "operation" -------------
	var operation string

	err = runtime.BindStyledParameter("simple", false, "operation", ctx.Param("operation"), &operation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter operation: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SpeculationOperation(ctx, speculation, operation)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RawTransactionParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx, params)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TransactionParamsParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx, params)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET("/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.GET("/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET("/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET("/v2/blocks/:round", wrapper.GetBlock, m...)
	router.POST("/v2/blocks/:round/speculation", wrapper.CreateSpeculation, m...)
	router.GET("/v2/blocks/:round/transactions/:txid/proof", wrapper.GetProof, m...)
	router.POST("/v2/contracts/batch", wrapper.ContractBatchExecute, m...)
	router.POST("/v2/contracts/:id", wrapper.CreateContract, m...)
	router.POST("/v2/contracts/:id/call/:function", wrapper.CallContract, m...)
	router.GET("/v2/ledger/supply", wrapper.GetSupply, m...)
	router.POST("/v2/speculation/:speculation/:operation", wrapper.SpeculationOperation, m...)
	router.GET("/v2/status", wrapper.GetStatus, m...)
	router.GET("/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST("/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST("/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.POST("/v2/transactions", wrapper.RawTransaction, m...)
	router.GET("/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET("/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET("/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"xELv76/+fwAAAP//mKqZXD8bAQA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
