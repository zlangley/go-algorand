// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64, params GetApplicationByIDParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64, params GetAssetByIDParams) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Create a speculation context starting at the given block.
	// (POST /v2/blocks/{round}/speculation)
	CreateSpeculation(ctx echo.Context, round uint64) error
	// Get a Merkle proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetProof(ctx echo.Context, round uint64, txid string, params GetProofParams) error
	// Executes a batch of contract initializations/calls.
	// (POST /v2/contracts/batch)
	ContractBatchExecute(ctx echo.Context, params ContractBatchExecuteParams) error
	// Creates a new contract with the specified identifier and source code
	// (POST /v2/contracts/{id})
	CreateContract(ctx echo.Context, id string, params CreateContractParams) error
	// Calls a function on a previously initialized contract.
	// (POST /v2/contracts/{id}/call/{function})
	CallContract(ctx echo.Context, id string, function string, params CallContractParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Operates on a speculation object.
	// (POST /v2/speculation/{speculation}/{operation})
	SpeculationOperation(ctx echo.Context, speculation string, operation string) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Broadcasts a raw transaction to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context, params RawTransactionParams) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context, params TransactionParamsParams) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
		"format":      true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationByIDParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetByIDParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId, params)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// CreateSpeculation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSpeculation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSpeculation(ctx, round)
	return err
}

// GetProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetProof(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProofParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProof(ctx, round, txid, params)
	return err
}

// ContractBatchExecute converts echo context to params.
func (w *ServerInterfaceWrapper) ContractBatchExecute(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ContractBatchExecuteParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContractBatchExecute(ctx, params)
	return err
}

// CreateContract converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContract(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateContractParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateContract(ctx, id, params)
	return err
}

// CallContract converts echo context to params.
func (w *ServerInterfaceWrapper) CallContract(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
		"args":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "function" -------------
	var function string

	err = runtime.BindStyledParameter("simple", false, "function", ctx.Param("function"), &function)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter function: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CallContractParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// ------------- Optional query parameter "args" -------------
	if paramValue := ctx.QueryParam("args"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "args", ctx.QueryParams(), &params.Args)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter args: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CallContract(ctx, id, function, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// SpeculationOperation converts echo context to params.
func (w *ServerInterfaceWrapper) SpeculationOperation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "speculation" -------------
	var speculation string

	err = runtime.BindStyledParameter("simple", false, "speculation", ctx.Param("speculation"), &speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// ------------- Path parameter "operation" -------------
	var operation string

	err = runtime.BindStyledParameter("simple", false, "operation", ctx.Param("operation"), &operation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter operation: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SpeculationOperation(ctx, speculation, operation)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameter("simple", false, "round", ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RawTransactionParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx, params)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"speculation": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TransactionParamsParams
	// ------------- Optional query parameter "speculation" -------------
	if paramValue := ctx.QueryParam("speculation"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "speculation", ctx.QueryParams(), &params.Speculation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter speculation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx, params)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"max":    true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------
	if paramValue := ctx.QueryParam("max"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"format": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------
	if paramValue := ctx.QueryParam("format"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET("/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.GET("/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET("/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET("/v2/blocks/:round", wrapper.GetBlock, m...)
	router.POST("/v2/blocks/:round/speculation", wrapper.CreateSpeculation, m...)
	router.GET("/v2/blocks/:round/transactions/:txid/proof", wrapper.GetProof, m...)
	router.POST("/v2/contracts/batch", wrapper.ContractBatchExecute, m...)
	router.POST("/v2/contracts/:id", wrapper.CreateContract, m...)
	router.POST("/v2/contracts/:id/call/:function", wrapper.CallContract, m...)
	router.GET("/v2/ledger/supply", wrapper.GetSupply, m...)
	router.POST("/v2/speculation/:speculation/:operation", wrapper.SpeculationOperation, m...)
	router.GET("/v2/status", wrapper.GetStatus, m...)
	router.GET("/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST("/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST("/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.POST("/v2/transactions", wrapper.RawTransaction, m...)
	router.GET("/v2/transactions/params", wrapper.TransactionParams, m...)
	router.GET("/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET("/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PbuJLoX8FqtyrJrGg5r9kTV03t9STz8D1JJhV7zp67ce4sRLYkHJMADwBa0uT6",
	"v99CAyBBEpTkR14z+pRYxKPRaHQ3uhvdH0apKErBgWs1OvowKqmkBWiQ+BdNU1FxnbDM/JWBSiUrNRN8",
	"dOS/EaUl4/PReMTMryXVi9F4xGkBTRvTfzyS8M+KSchGR1pWMB6pdAEFNQPrdWla1yOtkrlI3BDHdoiT",
	"F6OrDR9olklQqg/lLzxfE8bTvMqAaEm5oqn5pMiS6QXRC6aI60wYJ4IDETOiF63GZMYgz9SBX+Q/K5Dr",
	"YJVu8uElXTUgJlLk0IfzuSimjIOHCmqg6g0hWpAMZthoQTUxMxhYfUMtiAIq0wWZCbkFVAtECC/wqhgd",
	"vRsp4BlI3K0U2CX+dyYBfodEUzkHPXo/ji1upkEmmhWRpZ047EtQVa4Vwba4xjm7BE5MrwPyqlKaTIFQ",
	"Tt7++Jw8fvz4mVlIQbWGzBHZ4Kqa2cM12e6jo1FGNfjPfVqj+VxIyrOkbv/2x+c4/6lb4K6tqFIQPyzH",
	"5gs5eTG0AN8xQkKMa5jjPrSo3/SIHIrm5ynMhIQd98Q2vtNNCef/rLuSUp0uSsG4juwLwa/Efo7ysKD7",
	"Jh5WA9BqXxpMSTPou8Pk2fsPD8cPD6/+9d1x8t/uz6ePr3Zc/vN63C0YiDZMKymBp+tkLoHiaVlQ3sfH",
	"W0cPaiGqPCMLeombTwtk9a4vMX0t67ykeWXohKVSHOdzoQh1ZJTBjFa5Jn5iUvHcsCkzmqN2whQppbhk",
	"GWRjw32XC5YuSEqVHQLbkSXLc0ODlYJsiNbiq9twmK5ClBi4boQPXNCXi4xmXVswASvkBkmaCwWJFlvE",
	"k5c4lGckFCiNrFLXE1bkbAEEJzcfrLBF3HFD03m+Jhr3NSNUEUq8aBoTNiNrUZElbk7OLrC/W43BWkEM",
	"0nBzWnLUHN4h9PWQEUHeVIgcKEfk+XPXRxmfsXklQZHlAvTCyTwJqhRcARHTf0Cqzbb/79NfXhMhyStQ",
	"is7hDU0vCPBUZMN77CaNSfB/KGE2vFDzkqYXcXGds4JFQH5FV6yoCsKrYgrS7JeXD1oQCbqSfAggO+IW",
	"Oivoqj/pmax4ipvbTNtS1AwpMVXmdH1ATmakoKvvDscOHEVonpMSeMb4nOgVH1TSzNzbwUukqHi2gw6j",
	"zYYFUlOVkLIZg4zUo2yAxE2zDR7GrwdPo1kF4PhBBsGpZ9kCDodVhGbM0TVfSEnnEJDMAfnVcS78qsUF",
	"8JrBkekaP5USLpmoVN1pAEacerN6zYWGpJQwYxEaO3XoMNzDtnHstXAKTiq4poxDZjgvAi00WE40CFMw",
	"4ebLTF9ET6mCb58MCfDm6467PxPdXd+44zvtNjZK7JGMyEXz1R3YuNrU6r/D5S+cW7F5Yn/ubSSbnxlR",
	"MmM5ipl/mP3zaKgUMoEWIrzgUWzOqa4kHJ3zb8xfJCGnmvKMysz8UtifXlW5Zqdsbn7K7U8vxZylp2w+",
	"gMwa1uhtCrsV9h8zXpwdG3CrnNo1xg5Y3eDSkqo5UbWKoAUpQRrqwbUjfIYbiBIkjjlEB+G0mw+XXkVv",
	"NS+FuKjKEONp69o8XZOTF0Oz2zGve3KO67t2eO05W/mr0HV76FVNaQNADm5uSU3DC1hLMNDSdIb/rGZI",
	"8HQmfzf/lGUe23RzwpwmgFYLZ814634zP+FG20uLGYWluFMTlO9HHwKA/k3CbHQ0+tdJY8qZ2K9q4sY1",
	"M16NR8fNOHc/U9PTrq9z02o+E8bt7mDTsb203j08ZtQoJKhJd2D4PhfpxY1gKKU5aJrZfZyacfonBYcn",
	"C6AZSJJRTQ+aW59VBAfoHTv+jP3wGgcyIoN/wf/QnJjP5hRS7fVLo1szZbRMEVjCMqOSWkFnZzINUFUW",
	"pLBaKDHa47WgfN5MbiVIzfLfObS8744W2Z0frOJLsIdfhFl6c609ngp5M3rpEAInzWWdUDNqrZ6blbd3",
	"FptWZeLwE1H4bYPOQI19tM9WQwx1h4/hqoWFU00/AhaUGfUusNAe6K6xIIqS5XAH53VB1aK/CKOBPX5E",
	"Tn8+fvrw0W+Pnn5rVIhSirmkBZmuNShy38kVovQ6hwf9lSGDr3IdH/3bJ/6K1x53K4YQ4HrsXU7UGRjO",
	"YDFGrEHDQPdCrmXF7wCFIKWQEb0BSUeLVOTJJUgVVW7euBbEtTB8yF4MOr9baMmSKqfXQEYqnoE8iGHe",
	"XARRpGso1DZBYYc+W/EGN25AKiVd93bArjeyOjfvLnvSRr6/fiijyCV6xUkG02oeyigyk6IglGTYERni",
	"a5HBqaa6UnfABZrBGmDMRoQg0KmoNKGEi8wcaNM4zh8GjK1o5UHjlA5Zjl5Y+TMFo76ntJovNDFqpYht",
	"bdMxoandlARlhRq4m9ZGBdvKTmcNebkEmq3JFIATMXUXQHc1xUVStBtp7xJy3KkBq760tOAqpUhBKcgS",
	"5//aCppvZ3dZb8ATAo4A17MQJciMyhsCq4Wm+RZAsU0M3FqdcLfmPtS7Tb9pA7uTh9tIpbkEWyowuos5",
	"3TloGELhjji5BIm3x4+6f36Sm25fVQ74dpwEPmOFOb6EUy4UpIJnKjpYTpVOth1b06ilJpgVBCcldlJx",
	"4AELxkuqtLUhMJ6hymjZDc6DfXCKYYAHJYoZ+W9emPTHTg2f5KpStWRRVVkKqSGLrYHDasNcr2FVzyVm",
	"wdi1+NKCVAq2jTyEpWB8hyy7Eosgqr0BwBvZ+otDf4GRA+soKltANIjYBMipbxVgN7RvDwBi7hd1TyQc",
	"pjqUUxvVxyOlRVma86eTitf9htB0alsf61+btn3iorrh65kAM7v2MDnIlxaz1rOxoEa3w5FJQS+MbEJN",
	"zdoS+jCbw5goxlNINlG+OZanplV4BLYc0gEl2flOg9k6h6NDv1GiGySCLbswtOABjf2NNdGfNdahO1Ba",
	"XoCmLFe1YlL7AZpZ0GXQDecwWqSEFLjO14ZWZ0wW1uuG4kz536zak7lZrH+pOX48IxKWVGa+Rf+2FCwm",
	"YTyDVZy70pZtJIMVYXGgZ/XMTJPU+8R4OMBB9KBbL2OaC8X4PLHuy21CrfY63lOk4swJsCVIB9cMpBO7",
	"2rvvEi28i28THJtQ4YwzN0GC6Rqf1gJnd0vFvLz4wRzEgqVSUOu8NUjtLJBIKKiBDt2ITuwPz7kJ2c/t",
	"d+9L9jb8kHbj43p6HeQwNYkuF7hZhtV2kRhSvbnagoKhhcxzMaV5YhR+SDLI9VbTm7lIwAtsaeS1SPvd",
	"2yCfn7/Ls/Pz9+SlaYt3CyAXsJ6gS52kC8rn0Pg5wvNibw2wgrQKRUsHjTtdBJ2ttA19+yo4HpVC5El9",
	"5e36ZXripov3C5ZeQEYMv8Ij5qTgvfYOmUnIfUPiqvZcLRdrr0KWJXDIHhwQcswJFKVeO/tKR+PpTM7v",
	"6U3zr3DWrEInOuUEF3lwzuOmDeuCv+WZ8sNsPkk2Ju2WU9lBNk+kVwP+F0mX6EEyw0XP50br6Cn2DERf",
	"T6IHRGWh2MWG8BMGatHWLrMMryONdFPVtGAYrRU0GxvO6R3o/Rs+0weEnCHvMBcsBZcgaY6hKMobjpki",
	"BTMXdVWlKUB2dM6TFiSpKNzE95v/WrZ0Xh0ePgZy+KDbR2mjrrq7pD0D3b7fkcOx/YToIt+R89H5qDeS",
	"hEJcQmbvYyFd215bh/2Xetxz/kuPMZOCru1Nzp9FoqrZjKXMIj0Xhq/PRUfr5AK/gDTggRGzijA9RlGG",
	"GEVt3e5LcwBHUe3pLmw+kVGNnm5EqeF23m3aph1FYEVTs0qKTGZtNYKazvpKkBZlEg4QNUFvmNE5AVSL",
	"j9/w3PX5uTVAbIbvrGOCaKEjINeD7bp7DxlRCHY5/sekFGbXmQuQ8lE0OVO6B6QzR6AHqCbIiNA5IP9H",
	"VCSleH7LSkN9txMSL0x4kTYzoIz1czpNrcEQ5FCAtRDhl2++6S78m2/cnjNFZrD0UYWmYRcd33xjD4FQ",
	"+tYnoEOaq5OIAoWGeSNNI5HgC6oWB1uN9DjuTrb5YOiTF35CPExKoYgxC5dCzO5gtSxbRXUWWMVW6nYO",
	"zW33FCnpelC9Lg2AkXAykBc52vLFrEORxPG/BSvNkE3oy1pDK2z2/97/z6N3x8l/0+T3w+TZv0/ef3hy",
	"9eCb3o+Prr777v+1f3p89d2D//y3mPKiNJvG/T4/U7UwkDrOseIn3HpujeaJBru1swOI2aeGu0NiZjM9",
	"5oMl7UJ0b2IbwowqgZuNNHfaxIbcgaRp4q+QpKgKL9E2NMxgOAhIcRq907I6PnaqYNO1pzaMheNNYc54",
	"3AKaLiC9QLvmVkNvi6mWRstCRgE0XZBmmJikCtXMngi6gAHFswSpmDIod2iargOjX7g+w7OnRqOegQSe",
	"xsyZXZ88tZZJnH0Xugloohs+cVqVZb6+C0rBgYgEdyVVLWu6sl/FLAyydoxKrZWGou+Qsl1/G7gsv/XG",
	"rN4uCZ4zDkkhOKyj74oYh1f4MXqVQCk20Bn1iaG+XWNfC/4OWO15dtrDW+IXmUMgtd7UId93sPndcTu+",
	"yDC8HC/CkJeEkjRn6GkRXGlZpfqcU7Tldm5qHbLwFuph6/5z3yTuTohY+91Q55wqg8Pawhv1Uc8gwsR+",
	"BPBGflXN56A6NzcyAzjnrhXjaJfDufDim9gNK0FiMMGBbWkuKzOaozPid5CCTCvdZmQYBWsvX9YxaqYh",
	"YnbOqSY5UKXJK8bPVjicN8J4muGgl0Je1FgYMCIBB8VUEpe7P9mvKH7d8hdOFOOTJPvZi6dPrS942GMh",
	"kA7ykxfu5nTyAtXjxiXag/2T+ckKxpMokRnBUjCOof4d2iL3jZLvCehB41x1u37O9YobQrqkOcuovhk5",
	"dFlc7yza09GhmtZGdNwefq3vYxaZuUhKml5guNJozvSimh6kopj4G+NkLurb4ySjUAiO37IJLdnECNnJ",
	"5cMt2vst+BWJsKur8chxHXXngZFu4NiCunPWDkf/txbk3k8/nJGJ2yl1zwYw26GDQNbIJd+9F27Zm8zi",
	"7YNDG7F+zs/5C5gxzsz3o3OeUU0nU6pYqiaVAvk9zSlP4WAuyBFxQ76gmqKZsuN8GXoTjCZkB01ZTXOW",
	"kotQFDdHc8h2f37+zhDI+fn7XnhCX3C6qeL+EJwgWTK9EJVOnANr2NSpWoq0cx1smnVM3NiWIp2DzI0/",
	"4KMpS5UERvv48ssyN8sPyFAR7IThrURpIT0TNJzRmV3N/r4WLkBD0qV/BVUpUOR/Clq+Y1y/J4kzER6X",
	"JXoE0CT/P47XGJpcl7C7Wb8BsRkspofjwq1CBSstaVLSOajo8jXQEncfBXWBRtc8J9it5Z7wwX04VLOA",
	"jWboAI5rh17j4k5tL+9viy8BP+EWYhvDnRr3yU33ywz1s8gNkd14u4IxortU6UViznZ0VcqQuN+Z+qHi",
	"3PDk+lbI5twcAvemcwr25gYZ+orRnTJudfcROU7CedbBlH2GaSOs8a2Qv4VVZUadDkD5uvsmQoHW/qXK",
	"W7iA9Zlonhpd5xGEubta/2diaGbooCKlBsLIEGt4bL0PtbP5zh2OPsqyJNYNaIPXPVkc1XTh+wwfZCsh",
	"7+AQx4iiRsMGei+pjCDCEv8ACm6wUDPerUg/6nSkUrOUlfUToR3cmG9afcwg24RLVJyIWVdq9Jh6lInZ",
	"xkncVnN+/g7MF7Mf5gx1g9/8TNYIbeMaCKbycIQ7zSFwwCt3sqlEpcsv2+YmGAItTiUgeSPVPRhtjITq",
	"w8JFkrDLJn4ELYS7CNqt/ntDRd7aw9qeOmbmzeGSDjpNB9/QnQRxW8HT7PqFnGds3cMwrl9L2iwp/iWd",
	"fz7n38yNxtd6/zYeuVDi2HYIjlpGBjnMqfMRYpCyj0+xoN1TwQYZOH6ZzXLGgSSxEDCqlEiZDRtpeLmb",
	"A4wS+g0h1sBDdh4hRsYB2OhcwYHJaxGeTT6/DpAcGHpjqB8b3TLB37DdOdGkq3Hq7VY1tM87mkM0bp6T",
	"2m3sW6HGoyhLGrohtFoR22QKvStVjEQNa+rbZfrWHwU5oDhOWpw1uYhZ64xWAUiGp75bcG0g99nMCPkH",
	"gY9NwpwpDc292ZxWbwj6tLaLS6EhmTGpdIJX9ujyTKMfFSqDP5qmcfbTQhWx+S5YFuc+OO0FrJOM5VV8",
	"t928f31hpn1d359UNb2ANQoZtKpPMT+LkUKt6U2bDVPbMMiNC35pF/yS3tl6d6Ml09RMLIXQnTm+Eqrq",
	"8JNNhylCgDHi6O/aIEo3sJcgcKvPW4I7mQ0vw1C0g01Wg95hunbw2yDntSNF1xIouhtXYWMkbRhkkN6k",
	"/yRn4AzQsmTZqnOHt6MOeHlRgb+Gom41/ojnclQPtgUDwX09FvUtwdsc7JYGMtMmqulFxm7HTDceN2AI",
	"4VRM+TRrfUQZ0sbAxW24OgOa/xXWfzNtcTmjq/Hodlf+GK7diFtw/abe3iie0ZZtr4AtC941UU7LUopL",
	"mifOMDJEmlJcOtLE5t6O8olZXfz6ffbD8cs3DnwM9AUqXXzrplVhu/KrWZW5EceCXM8Cywhqq/7ubBWx",
	"YPPrp+ehMcXHJLd0OcPFHHHZ49UYyoKj6Iwrs7hLbaupxNn07BI32PagrE17zY3YWvba1jx6SVnur6Ie",
	"2u0x1DfiCq0g7NtaBcOI7DtlN73THT8dDXVt4UnhXBuCSgqbt0oRwbtxaEaFxBsukmpB14aCrHG6z5x4",
	"VSTm+CUqZ2ncbMGnyhAHtzZf05hg4wFl1IxYsQEXAq9YMJZppnbwlnWADOaIIhNNShtwNxUu4WjF2T8r",
	"ICwDrs0n6eJSWwfVnEv/1KIvTuPPOtzA7mVHPfxtdAwz1JB2gUBsVjBCC3PkUZG/cPqF1qZx80NgGLyG",
	"oyqcsScSNziZHH04arbe/kXbUhzmB+3zP0MYNpfU9uSk3myxsIAOzBFNNjooLY6HJQU+19ldRjQiAcEN",
	"hYENoaa5EpFhKr6k3OYONP0sDl1vBdZmYHothcQ3rgqiXnqmkpkUv0P8JjszGxUJlXWoRHURex9E3g52",
	"mWhtlWmywnr8hnAMkvaQJhd8JG1H4sAJRyoPTOcY++8NXJRbsrZ5Dlvu6/jhCENOJnb85nA4mHthOjld",
	"Tmkso45RqAxMx42TpmWK04L4zn4XVP3kxdFe4O+p2zL7MLQE2cSz95MQ3FA5+rpIPoOUFTSPa0kZYr8d",
	"HZmxObPJIisFQTZCN5DNsmupyGV0tG6wBjUnM3I4DvKdut3I2CVTbJoDtng4bsJI8WFi+FjRBUZp4Hqh",
	"sPmjHZovKp5JyPRCWcQqQWoF1r5B87bvKeglACeH2O7hM3Ifrf6KXcIDg0Wni4yOHj7DsBT7x2FM2Lms",
	"sJv4SoaM5b8cY4nTMbo97BhGSLlRD6KPlG0q72EWtuE02a67nCVs6bje9rNUUE7nEPfmFltgsn1xN9Fo",
	"2MELBheTDJSWYk2Yjs8Pmhr+NBCaZtifBcM9aSpsMC5RojD01KQatJP64WxSW5ddy8PlP6KLpfRP0zoX",
	"5k9rILayPLZqdIS9pgW00Tom1L7lx9d1LgeEY4gH5MRnBMF0Y3WWMYsbM5dZOqp0ZgsxqxLjGi9RlZ4l",
	"fyHpgkqaGvZ3MATub9NvnwyA/O0TA3QnwRK/3hp2vFkGWTpBgbyMY1EOULBXDFxfcp8LnhSGOWQPmqjO",
	"4IBF0xwJTfN4fIpnzt3wpM1D76pLmlGSQcqpWpRDA6Z7KxriGwa8JVXV6xkkrWozaV17kdcmskrGd5pW",
	"Bqxf3750sr8QMpa1qTmE9UMBLRlcYtRLHN9mzFuiVebDZ7WKIvQ2C7kmTrtRqLWKXes9/oTFNO3vK5Zn",
	"f2tixztPVCTl6SLqRJiajr81iXVruOzpij9QoZxDHh3OCqXfvPCKiNd/iF3nKRjfsW33KYldbmdxDeBt",
	"MD1QfkKDXqZzM0GI1XYwbR19lc9FRnCeJrlMQyX9N9mYLpBrQ6fRl6fH+Vw8z6lkGnOBYMPdXQWBucSH",
	"iQVj9EMdRCXTgZBs+42Yc7DDWFFDvx39/QYUPKd5vjMaSErziPecyvnAQykq55V996kFKSnW1HFKzqzi",
	"7mG4G7P/IMK1iA9d9zcXO9o8E2/0r42Iv/7+2bfjdYplnDNcyA6BFgZPwboQitjm+GyA/6xA6Vh+A/xg",
	"A2vRmGkuhjYTIAGe2TdnxOYDMCC2XnTjdYYVVW5fB0M2B+ms7FWZC5qNiRnn7Ifjl8TOqlxuG3yHjpkI",
	"5za3ROuUdWgiyJR2nWQbQ3G4u4+zOTDQrFppTJWkNC3K2BML0+LMN8B3HKFhH/X8EDsH5IW9YimvwNtJ",
	"mpwqpJ7OqQPIs8x/tKbpAu8uLU1/mCXvnkLTc00V5Lqvs3LXyc5smhAtfBZNm0RzTIS5YC6ZsvU64BLa",
	"rzrqJ07ukPhXHu3lyYpzSynRM7jpCd5N0O6Bs9Eb3vYfhayD+Guqu5avXjej6KnlxrEHn930pL0k9/b1",
	"cZ3D2ddhSikXnKX44j+oEFKD7Gp/7KIF7ZAcocvO/BF3JzRyuKJJUev4MIfFwTSpnhGeDgjJ8KvZVEsd",
	"9k9MiY8Wtzlo5TgbZGOf+NYZzBhX4JLXYRmYgE8K2XI2IoeM+q+b9FXXJCOM8R64Nv1ovr1292OMy7xg",
	"HHVuhzYXAmpNWliaQBtFnWkyFxDI2XBN70yfA3zGnsHq/YEvZYBjWF+dWbZ1TPeHOvZuaucWNm2fm7YE",
	"/XLNz614cjvpcVm6STerQbHUvYMIjrgbE+/vCZBbjx+OtoHcNsaXoDw1hAaX6J2GEuVwjzAGUkL9cEnz",
	"yr1ox8wyNq4r+g6Q8QgYLxmHptBGRECkUZGAG4PndaCfSiXV9oqyE087A5qjSzrG0JR2NvrbDtXZYEQJ",
	"rtHPMbyNTQLnAcZRN2guFpSv6/oehroDZeI5FhZyiOynY0atyilRGUbudhI0xxiHYdw+tXlbAPSPQV8n",
	"st2NbgrXlURDL54ypsxdupjmkVjFF/XHIEk5BkVP1/hvLM3B8ApcBMONE8hhx2vrl5uTueVm7xPF5jfc",
	"lab/HW5L5wyEexSj/h8MWwkfifaudpbx1G84MU5L+JIReKmoXx+1aRYZXdSo0GT/33wFGs7jP0bWOBCt",
	"+bZJT0At97VOmKGYzXQwxJhq935AU7Ipq6JNvh8bwQZ82KT/tsJf1NQ1FORhYzzM517v3fSGnhaGY29E",
	"qI8e6gP0Vx+aSErKnIexOSJ9zLog5n5Y+S7hjc0GdxfhQoNxkNhKbhjJu9PZ62MpcrDDGKwt5HnRQql9",
	"8tfRJIWEO0ZtIEKvidp+dNmuy8N1IMVUCvrr3HkDWrgdwP0uiG/4QiRF0OBx1tNdjnP85ZTpjvzEIsS/",
	"7etzk0/GDVo1Q9y8sV3/25D1wN6QBwypHZxWLM+2bW7LLN7kzkDDr/cFfJbsHb9ZC2D/uLlEBtcR/N1N",
	"QMRE1tqaPJgqMHjvYOt23SKWbcyNmlaS6TUGSXpNk/0WfXzyE3BXOcUVoqpDTVykg00x5fwq87p1U1fv",
	"J2FLyRRG/UVVUGPSwB9WtChzcOfiu3vT/4DHf3mSHT5++B/Tvxw+PUzhydNnh4f02RP68Nnjh/DoL0+f",
	"HMLD2bfPpo+yR08eTZ88evLt02fp4ycPp0++ffYf93zNOAtoU4/t75jiJjl+c5KcYd6qZmtK9ldY26QW",
	"hox9ugxn9oeCsnx05H/6X/6EHaSiCOpwu19Hzt82WmhdqqPJZLlcHoRdJnNMY51oUaWLiZ+nn6PxzUlt",
	"oLWRVbijdWU+6zZzpHCM397+cHpGjt+cHDQEMzoaHR4cHjzErFQlcFqy0dHoMf6Ep2eB+z5xxDY6+nA1",
	"Hk0WQHO9cH8UoCVL/Se1pPM5yAOXN8T8dPlo4u07kw8umujKjDqPhY/61LO1fbGfTmNsDRZoNvepZoMX",
	"m8o95ByTqQ2UJC7bMc/QAmiD4Axrq5F1kgVV/4P0Yy7W0z5+OXoXSy4aS/YRqVnZvM8ZLlcZVPT2Vbyf",
	"/uUq5gv4Ags5fj01it936iM+Ojz8CDURx61RPDg3LK745A5BbF/qbg1od7geo3pFc7NdUBf0HuGCHn61",
	"Czrh+I7QcFJiJcXVePT0K96hE27YDs0JtgzCB/vc+Vd+wcWS+5ZGS6iKgso16gBBApNQ27salALtwF33",
	"EnxYNECQJDhIHtGytU/Xns7GRNU1YUrJhNFlsPx9BqkEipqHkOiiatINuyfyYHN9vjr+Oxq0Xx3/3ebx",
	"jpYGD6a3Oe3bcuUn0JF02N+vm+qxX4mQ+VKqqf95RM0+qfpXm1R9B6a93919yvyvNmX+162SrupHF5Rw",
	"wROOyXQugQSWtr2O+kXrqE8PH3+1qzkFeclSIGdQlEJSyfI1+ZXXQUq3U8FrnlPxIGxsI//pFYhqtOhA",
	"fQ8S+00+tOrPZdvtOa1MIFmrTBCN1+8Pcp65AOpxk96A8swGl3j3sRr7Z/5oQLT5NOx+jHtJAA5iSnrg",
	"/fl+ffJiF728tabg9XFMN2/ha6OKvl3j/fz2no9qRAnjLiOiNk4uH1so9eD4nmbEB9Z+ZHGxG39/cvjk",
	"00EQ7sJrocmPGIr3kaXMRzVdxMkq4H+Yz3Pywb+d3oHnubwEbW7nylBu5HPmNI7dCytXOaEu2WdYnOXN",
	"NjVEn5GZGXZlYf3UCTHm1TwX37OtLSlWI0elu+N7VrVnVbdiVV2CapiULWE/+YCR0SGH6nEJrD61jUN8",
	"uaa18Ybctq3XNTPQ6cLWyOgGIUQ4nY8oH2Zzmx7e35q/dMIicIt65GHrhjlHOz4I37FaKHb82fq9r8aj",
	"FGSE+H7x4XvmM5th8tj6tYDPL4HPOZl/3Fm/63Rv0pkihkC1IC5Ij5hdvBaUz5vJ+0ERiJab2dz2CL4N",
	"gntM7Qf3ttYeL7eIr908FEhLkpDXqKHhAffB8n9E49DHlMgfe0GvBQcCK6Yw57Wlxb1TtlYX6lqbdUWl",
	"sC7OgOowCVVqwziFiugRzzEH0WlL+96oUAxJaayhGFYd/DLl87725J+q9uTnuqR9FrHzBd7cPgdj/1ic",
	"2LJKF9lYk7ezgChNJa7RxZ9YBu1r5sYZdCt25oNesexqUpdLHrr1vXFVfXdk0o1lpuMloGUJVKobc+nd",
	"jEW6XcM6yKIv6iBiQpuiyRFQDF6uGRDz77tEw/xxg072lb33lb1vVtn7k4rLJq7UsiqvzcgO1/isYlN/",
	"LrGZoNQ0Cpa7mrfQ8vlkKD4YbZWz8uk/uLBFooUVhCEfUAc7SV0Y9Ii3mAo+lhgmYydsU6rTRVVOPuB/",
	"UP+9ah40+Ew+ajL1T939BaljIEF9HzOm1OVm6jRAmMWW5ux351RPaZ5HXDo+wdL3ZgA34C4i/AtwtaA2",
	"+73I1h1SM7BMypwyfCRy1ZXPV/tr2v6a9uVf076MG9nXeBm6GVtcJUZrngNPHGdJpiJb+5zxlhNf9Tj0",
	"B+eqjzNoey1TrlJ2DQNmMmgngeuULwhy6kVYNo5aJwfsMevIRWU37/qX/AZsd44fDNJow4xTGcleE/Hn",
	"BvkEg10Y7aXIXorspcifSIrcBe/eKlZcwq+4XEHZNPng83BukjNGiBHaJBsVHC1XcMlEpdDZ66ReJ99o",
	"R7DQPP/IYiUySJBn9KuWUH51ne4um+rHCxvbS5K9JNlLki9ZktyMO3uhYFMfT2yk7ib3y6ltcbfsxMYH",
	"yyaBUZjoxUUPt+vM+wTXa6Wh6FdGsl1/25RUN8o6BBY2TwrBYzlibNnzV/gx1ts+NRvojI/+hvp20+23",
	"4O+A1Z5np4N+S/wefBnH8lbhI53VSijrp/X4BhHpvzkPvp50v8hyOwWMa64Wlc7EMkgYE/DyyYfgj6vJ",
	"h/pMbVC2wiQynkcjZx/XCgYlKhUlGN2C20wAJM2FTQrgZ+hpXwHP/yVotF0Laysot1XHQgB3H2uvxOyV",
	"mL0S8wdWYixLAmWVl5CS6sBcz14xQdZGRcW2uFOW8VpkYMdt56TrV+Kh+CLe5fHq6ye1Ry5+wrywatrZ",
	"9O1MkSngMytazRfalkmL1mCsOyY0tacrscE325iJbWWnW9BLIDSXQLM1mQKYbTCLbsQmLpKquu4lSlrr",
	"d4xztQauUooUlIIsCctjbAKtzo6GgZd6A54QcAS4noUoQWZU3hBYq3FtBrRbTawGtw6Cd0pVH+rdpt+0",
	"gd3Jw22k0rBgSwVYrUUUZQ4ahlC4I04wMIR95P3zk9x0+6oSKzDErFn49YwVmK6VUy4UpIJncXGcU6WT",
	"bcfWNArXosAKR39SoontzcAD95SXVGlXAIRn+NBBuZIqyhf2MFMMAzxYF8WM/Lc6r2lv7NTwS64q1dRG",
	"sXENMQk+HnFYbZjrNazquayTzI1dB07YmqjbRh7CUjB+XS1F9/UuW/9kFVvckuU5vp6NX+taQDSI2ATI",
	"qW8VYDcMshsAhKkG0ZZwsEpoSDlBvVKlRVma86eTitf9htB0alsf61+btn3ictGbyNczASoManGQLy1m",
	"bSGkBVXEwUEKeuHiYeYuiVcfZnMYE8V4CskmyjfH8tS0Co/AlkPavUOHx791zjqHo0O/UaIbJIItuzC0",
	"4Jhm+1VqjVtdnXf3CqRttQjUq65WOFlSppOZkFZiJlhrOfKgtD37f1GmXYVvF3GmhQsSdtWaLUNx4wRl",
	"wFSYAcmC4KOgze73XSBmqh+F3On9anOD1IKYhZGKa+bTxprzVuuYX/pjk732vNee99rzXnvea8977Xmv",
	"Pe+157vXnj/XW8fE82mfkzGWkZHs7cIfOenhp8xS2Cj9tcqPlwSjoptzvPGhugaaT1zxzW0+wLCQJ5a/",
	"ZpxgFCqW9fTZqbul4n1JOlvLx/Aa0+DxI3L68/HTh49+e/T0W8N9FrZwfdj2vsvqTZRe5/DAJfSoC3X4",
	"zB7AKda+w8Qe1N9+Uvem0CrzM5YDUQZXP2DrF3AJudHk7cMiYu4i/dvRGdD8ucPNJ4rH7eEY3/PX5VHv",
	"PC63fZ+JP8rr79e2rYqWFR6o+riJXLY66Vyhejf2Ll46s6cencRVovy8r9MRIkdmDXf6Yl6nd6pN+oOD",
	"bY1S4Y7fVxut5BAfPXh4bMeGJrMqBcK0Io7irhXnikzWVhzd4XUbQuKOwX31wHBZH90ZWnqiFd+d1QLL",
	"LtQRAp+Fb9ramRvZ5s2Jo12J/9YJZLrD9ZlG8MDxvpBkLkVVPsDtoHyNF+KipHztjWBGUyy8w9gmvbpb",
	"Rl2XMe6x2d0r0Ye3Fczz3v3dooUsqfJl6DNbhz5ei69bLX07xptawNtqt9n1RuuWD1Qp72+i32WXVKA2",
	"/JUgE73ikerBnVrB+0yTfwqJ8EaKS2auzVEG23/x3DCE7e/qZMCyUDJ0qjPEM0O9pcuw1sPX/Vw5JIBV",
	"4jTjW6vNC0CNsVYjI8U2jECXgmYpVZjuj4NeCnnxkVVqvTqJ2EUQTIyP7Of9MBrGwVbNF8fdSeFt531x",
	"E2JVE2ULVn5e9bfJPXHssiu2sLE3VfxRTBXf+8OnCCWSLruH01ol8UzuwEjpUq94lI9OkDsOR+QFB+KN",
	"bfl1MNQ78372ENB2gja4cE4cyEtCSZozdPEIrrSsUn3O7VPBAPX9WOTaND6sjj73TeJ+jIibwQ11zo1i",
	"OiO1aTmqls4g4jT6EcBrvaqaz0HpjqyYAZxz14pxUnFz9RMzUrBUisQ+TDAqj5E5B7ZlQddkRnP0gvwO",
	"UpCpuYiFAdFoklWa5bnzyJppiJidc6pJDkYsvWJGKTbDeatdHWVgT0aNhXgiKFdbNokbcn6yXzHJklu+",
	"t7yhgdB+9tlbxp+nAnTCskHIT164Ml4nL7AyS+OL7cH+yRx0BeNJlMgM23AxDV3aIveNnuwJ6EHj1XW7",
	"fs7NhUQLgqKI6puRQ9eR0juL9nR0qKa1ER1/i1/r+1hy5LlIzLWbzs3vc6YX1RRrMPukyZO5qBMoTzIK",
	"heD4LZvQkuErlcnlwy0azC34FYmwq71u8cdxg4R0YE5LvfGYCrK79wOawx1UTf2yS6Vu1XX2hUn3hUn3",
	"pSv3hUn3u7svTLov27kv2/lnLdt5sFFDdDnCt1ata2VGzTB4lkhI7cw1Aw+bterb9T27TB8QcrYw/J8a",
	"GQCXIGlOUqqsYsRtrGHB5gtNVJWmANnROU9akKSicBPfb/5rr7nn1eHhYyCHD7p9rN0i4Lz9vqiq4id0",
	"15HvyPnofNQbSUIhLsEVrcDmWYXudttr67D/Uo/7i+xtXUHX1riyoGUJRqypajZjKbMoz4W5DMxFJ0KS",
	"C/wC0gBnE2MTpm2tU8QnRpa6+CbqsuPGlO6+fD8JXoJvKyHYIZd9EvaPoWC/AE1Zrur3HZH7FN5supS1",
	"pKo5ujVX8emXQfnfnNPfzZKzCwijmDGAY0ll5lv0lbdWdVuewSpuWmrX2Mxg5VWCLtCzemambVVMc+Fs",
	"VdyNGxNtpUqXySOhhaiGAuYDPc1AZvrdU2g1tQcN9VWEawbSvV5Aa1YuFCRaNAWSh+HYhApXw+8mSFCD",
	"SfUtcHa3IhrqW/vBsES0ClM0CiNSOws0TIUa6CQ+5LKvJ4bn3ITs5y6tiv1eWwU7NvjIuJ5eBwO1axJd",
	"onBBrtdFYkj1M+JS+AwYorFCdGKDYTLI9VaN4dQ0fYEtr8YjLDrd7d4G+fz8XZ6dn78nL22BatOWXMB6",
	"cknzCki6oHwOqsZReF7s4ysbIRVE6HfQuFMky7Hdzjb03RuPkV5JHbPTq//Qjdrv4v2CpReQEcOv8Ii5",
	"xwSRywS5X5e2xXwyy8Xav8Sx4vDBASHHnEBR6jWxHLZj8+5Mzu/pTfOvQgHeloyRCNAU2CXIW54pP8zm",
	"k6TAHLhbTmUH2TyRXg0kp5F0Gbla71pYMHKT7txrA6KyUNyFgWIvHffScS8d99JxLx330vEPLx17Rqm9",
	"2eZTmG0+u+HmD1RUeV8/+QtbUBhu+1po8iNqFLezZjuJlUa1cWentiE9ypWAUpBWkuk1WhlpyX67APP/",
	"91fvzTd56Q2QlcxHR6OF1uXRZIJaxUIoPRldjcNvqvPRsFI6tyM4A18p2SWWP39/9f8DAAD//8m2VCKs",
	"HAEA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
